{"version":3,"sources":["Home/Home.js","useList.js","ToDoList.js","useTimer.js","Timer.js","Collab.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","roomName","setRoomName","className","type","placeholder","value","onChange","e","target","to","NEW_TASK_EVENT","STATUS_CHANGE","CLEAR_COMPLETE","useList","roomId","tasks","setTasks","statuses","setStatuses","socketRef","useRef","console","log","useEffect","current","socketIOClient","query","on","task","incomingTask","ownedByCurrentUser","senderId","id","push","data","copy","status","index","sendId","indices","statusesCopy","i","length","splice","disconnect","body","savedTasks","userId","emit","sendTask","taskBody","sendStatus","sendClear","ToDoList","props","room","React","newTask","setNewTask","handleSubmit","handleClick","preventDefault","currentTarget","onKeyPress","key","Button","variant","onClick","map","TIMER_START_STOP","TIMER_WORK_REST","useTimer","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","intervalId","setInterval","prev","clearInterval","sendStart","sendWork","OurTimer","secondsDisplay","startStatus","workStatus","Collab","match","params","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73165a9d.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./home.css\";\n\nconst Home = () => {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const handleRoomNameChange = (e) => {\n    setRoomName(e.target.value);\n  }\n\n  return (\n      <div className = \"home-page\">\n          <header className='home-header'>\n            <text> \n                POMODOER\n            </text>\n          </header>\n          <div className = 'room-form'>\n            <input\n                type = \"text\"\n                placeholder = \"enter room name...\"\n                value = {roomName}\n                onChange={handleRoomNameChange}\n                className = \"input-field\"\n            />   \n          </div>\n          <div className='button'>\n            <Link to ={`/${roomName}`} className='join-button'> \n              join room\n            </Link>\n          </div>\n      </div>\n  )\n}\n\nexport default Home;","import {useEffect, useRef, useState} from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_TASK_EVENT = 'newTaskItem';\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:3000';\n\nconst STATUS_CHANGE = 'statusChange'\nconst CLEAR_COMPLETE = 'clearCompleteTasks'\nconst SENDING_USER_ID = 'sendId'\nconst useList = (roomId) => {\n    const [tasks, setTasks] = useState([]);\n    const [statuses, setStatuses] = useState([]);\n    const socketRef = useRef();\n    console.log('tasks after useList called', tasks)\n\n   \n    \n\n    useEffect(()=> {\n        console.log('creating new websocket connection');\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n\n        // listens for incoming tasks\n        socketRef.current.on(NEW_TASK_EVENT, (task) => {\n            const incomingTask = {\n                ...task,\n                ownedByCurrentUser: task.senderId === socketRef.current.id\n            };\n\n            //adds task to tasks list, adds corresponding status to statuses\n            setTasks((tasks) => [...tasks, incomingTask])\n            const copy = [...statuses];\n            copy.push(false);\n            setStatuses((statuses) => [...statuses, false])\n\n        });\n\n\n\n        // listens for status changes\n        socketRef.current.on(STATUS_CHANGE, (data) => {\n            const copy = [...data.status]\n            copy[data.index] = !copy[data.index];\n            setStatuses(copy);\n        })\n\n        // listens for connection\n        socketRef.current.on('connect', ()=>{\n            console.log(socketRef.current.id)\n            sendId(socketRef.current.id)\n            //maybe add population in here?\n\n        });\n\n        // socketRef.current.on(SENDING_USER_ID, (data) => {\n        //     console.log('listening for sending user id', data)\n        // })\n\n        // listens for clear \n        socketRef.current.on(CLEAR_COMPLETE, (data) => {\n            const indices = []\n            const statusesCopy = []\n            for (let i=0; i < data.status.length; i++) {\n                if (data.status[i] === true) {\n                    indices.push(i)\n                } else {\n                    statusesCopy.push(false)\n                }\n            }\n\n            setStatuses(statusesCopy)\n            // setCompleteIndices(indices)\n            \n\n            // using indices to delete corresponding tasks\n            const copy = [...data.tasks]\n            for (let i=indices.length-1; i>(-1);i--) {\n                copy.splice(indices[i],1)\n            }\n            setTasks(copy);\n\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    useEffect(() => {\n        // listens for population \n        socketRef.current.on('populate', (data) => {\n\n            console.log('populate',data)\n            console.log('data body',data[0].body)\n            console.log(data.length)\n\n            if (tasks.length != data.length) {\n                const savedTasks = [...tasks]\n                for (let i=0; i < data.length; i++) {\n                    savedTasks.push(data[i])\n                }\n                console.log('saved tasks', savedTasks)\n                setTasks(savedTasks);\n            }\n        })\n    },[roomId,tasks])\n\n    // socketRef.current.on('users', (data) => {\n    //     usersLength=data.length\n    // })\n\n    //sends message to server that forwards to all users in room\n    const sendTask = (taskBody) => {\n        socketRef.current.emit(NEW_TASK_EVENT, {\n            body: taskBody,\n            senderId: socketRef.current.id,\n            statuses: statuses\n        });\n    }\n\n    // sends user Id to server\n    const sendId = (userId) => {\n        socketRef.current.emit(SENDING_USER_ID, {\n            userId: userId\n        });\n    }\n\n    //sends status change to server\n    const sendStatus = (index,statuses) => {\n        socketRef.current.emit(STATUS_CHANGE, {\n            index: index,\n            status: statuses,\n        })\n    }\n\n    //sends clear notif to server\n    const sendClear = (statuses,tasks) => {\n        socketRef.current.emit(CLEAR_COMPLETE, {\n            status: statuses,\n            tasks: tasks,\n        }) \n    }\n\n    // const populateTasks = (tasks) => {\n    //     socketRef.current.emit('populate', {\n    //         tasks:tasks,\n    //     })\n    // }\n\n\n    return {tasks, sendTask, statuses, sendStatus, sendClear}\n}\n\nexport default useList","import React from 'react';\n\nimport useList from './useList';\nimport './ToDoList.css';\nimport Button from 'react-bootstrap/Button';\n\nconst ToDoList = (props) => {\n    const roomId =  props.room; // gets roomId from props\n    console.log('roomId', roomId)\n    const {tasks, sendTask, statuses, sendStatus, sendClear} = useList(roomId);\n    const [newTask, setNewTask] = React.useState(\"\");\n\n    \n\n    // handles typing input\n    const handleChange = (e) => {\n        setNewTask(e.target.value);\n    }\n\n    //need tasks to updated here every time someone joins a room\n    \n    // sends task to server so it shows up for both people\n    const handleSubmit = () => {\n        sendTask(newTask);\n        setNewTask('');\n    }\n\n    // makes it so that hitting the enter key also works for submission\n    const handleEnter = (e) => {\n        if (e.key === 'Enter') {\n            handleSubmit()\n        }\n    }\n\n    // on click of task, sends statuses and index so that statuses can be updated\n    const handleClick = (e) => {\n        console.log('handleClick');\n        e.preventDefault();\n        const index = e.currentTarget.id;\n        sendStatus(index,statuses)\n    }\n\n    // on click of clear, updates and sends tasks and statuses to server\n    const handleClear = () => {\n        console.log('handleClear called')\n        sendClear(statuses,tasks);\n    }\n    console.log('about to render', tasks);\n\n    return (\n        <div className='taskList-page'>\n            <div className='ToDoForm'>\n                <div className=\"toDoFormTitle\">\n                    <p>TASKS:</p>\n                </div>\n                <input\n                    value={newTask}\n                    type='text'\n                    onChange={handleChange}\n                    placeholder=\"add a task...\"\n                    onKeyPress={handleEnter}\n                    className='taskInput'\n                ></input>\n                <Button variant='tertiary' className = 'addTask' onClick={handleSubmit}>ADD</Button>\n            </div>\n            \n            <div className='tasks-container'>\n                \n                <ul className='checklist'>\n                    <p>TO DO:</p>\n                    {tasks.map((task,i)=> {\n                        console.log(task, i)\n                        return (\n                        <li\n                            key={i}\n                            id={i}\n                            className= {`todo ${task.ownedByCurrentUser ? \"my-task\" : \"other-task\"} ${statuses[i] ? \"strike\" : \"\"}`}\n                            onClick={handleClick}\n                \n                        >\n                            {task.body}\n                        </li>\n                        \n                    )})}\n                </ul>\n            </div>\n            <Button className='center' variant='primary' onClick={handleClear}>CLEAR</Button>     \n        </div>\n    );\n};\n\nexport default ToDoList;","import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:3000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n\n    //function for decrementing timer\n    const decrement = () => {\n        if (start === true) {\n        const intervalId = setInterval(() => {\n            setSeconds((prev) => prev - 1);\n        }, 1000);\n        return () => {\n            clearInterval(intervalId);\n        };\n        }\n    }\n\n    //calls decrement every time start changes\n    useEffect(decrement, [start]);\n\n    //function for adjusting display time\n    const time = () => {\n        if (start === true){\n          if (seconds === -1 && minutes !== 0) {\n            setSeconds(59);\n            setMinutes((prev) => prev - 1);\n          } else if (minutes === 0 && seconds === -1 && work === true) {\n            setMinutes(5);\n            setSeconds(0);\n            setWork(false);\n          } else if (minutes === 0 && seconds === -1 && work === false) {\n            setMinutes(25);\n            setSeconds(0);\n            setWork(true);\n          }\n        }\n    }\n\n    //calls time on every re-render\n    useEffect(time, [seconds]);\n\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n        })\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,start]);\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n\n    return {start, sendStart, work, sendWork, minutes, seconds}\n}\n\nexport default useTimer\n\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport useTimer from './useTimer';\nimport './ToDoList.css'\n// import { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react-dom';\n\nconst OurTimer = (props) => {\n  const roomId =  props.room;\n  const {start, sendStart, work, sendWork, minutes, seconds} = useTimer(roomId)\n  \n  //click handlers\n  const handleStart = () => sendStart(start);\n\n  const handleWork = () => {\n    sendWork(work)\n  }\n\n  //variables for display\n  let startStatus = (start ? 'STOP' : 'START');\n  let workStatus = (work ? 'REST' : 'WORK');\n  //adds zero when seconds gets into single digits\n  let secondsDisplay;\n  if (seconds < 10) {\n    secondsDisplay = '0'+seconds\n  } else {\n    secondsDisplay = seconds\n  }\n\n  return (\n    \n    <section>\n        \n        <section className=\"timerTimer\">\n          <div>\n            <div className = 'buttons'>\n              <Button variant=\"secondary\" onClick={handleStart} >{startStatus}</Button>{' '}\n              <Button variant=\"secondary\" onClick ={handleWork} >{workStatus}</Button>{' '} \n            </div> \n            <h1 className='timerMargin'>{minutes + ':' + secondsDisplay}</h1>\n          </div>\n\n      </section> \n    </section>\n  )\n}\n\nexport default OurTimer\n","import React from 'react';\n//mock data\n// import data from \"./data.json\";\n//components\nimport ToDoList from \"./ToDoList\";\n// import './App.css';\nimport './ToDoList.css';\n// import useChat from \"../useChat\";\n\nimport {Link} from 'react-router-dom'\n\n\nimport OurTimer from './Timer';\n\nconst Collab = (props) => {\n  \n  const {roomId} =  props.match.params;\n\n  return (\n    <div className=\"App\">\n        <div className=\"App-header\">\n          <header className='collab-header'>\n            <Link to ={`/`} className='home-button'> \n              <h1 className='pomodoer'>\n                POMODOER\n              </h1> \n            </Link>\n          </header>\n       </div>\n        <div className='timer'>\n          <OurTimer room={roomId}/> \n        </div>\n        <h2>ROOM: {roomId}</h2>\n        <ToDoList room={roomId}/>\n      \n    </div>\n  );\n}\n\nexport default Collab;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport Home from \"./Home/Home\";\nimport Collab from \"./Collab\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/:roomId\" component={Collab}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    < App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}