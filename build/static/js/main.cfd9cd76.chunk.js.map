{"version":3,"sources":["Home/Home.js","useCollab.js","useList.js","ToDoList.js","useTimer.js","alarm_chime.mp3","Timer.js","Collab.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","roomName","setRoomName","className","type","placeholder","value","onChange","e","target","to","useCollab","roomId","socketRef","useRef","databasePassword","setDatabasePassword","useEffect","current","socketIOClient","query","on","data","console","log","JSON","stringify","sendPassword","password","emit","NEW_TASK_EVENT","STATUS_CHANGE","CLEAR_COMPLETE","useList","tasks","setTasks","statuses","setStatuses","task","incomingTask","ownedByCurrentUser","senderId","id","push","savedTasks","i","length","copy","status","index","sendId","indices","statusesCopy","splice","disconnect","userId","sendTask","taskBody","body","sendStatus","sendClear","ToDoList","props","room","React","newTask","setNewTask","handleSubmit","handleClick","preventDefault","currentTarget","onKeyPress","key","Button","variant","onClick","map","TIMER_WORK_REST","useTimer","start","setStart","work","setWork","alarmSound","setAlarmSound","infoReceived","setInfoReceived","countdown","setCountdown","clock","setClock","display","setDisplay","action","calculateTime","currentInfoReceived","currentStart","currentCountdown","currentClock","difference","Date","now","Math","max","foobar","setInterval","sendWork","clearInterval","newWork","newClock","sendStart","newStart","context","AudioContext","OurTimer","useSound","audio","volume","playSound","startStatus","workStatus","minutes","floor","seconds","time","newTitle","document","title","resume","Collab","match","params","setPassword","askForPassword","setAskForPassword","wrongPassword","setWrongPassword","handleChange","roomStatus","handleEnter","onKeyDown","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cfd9cd76.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./home.css\";\n\nconst Home = () => {\n  const [roomName, setRoomName] = useState(\"\");\n\n  const handleRoomNameChange = (e) => {\n    setRoomName(e.target.value);\n  }\n\n  return (\n      <div className = \"home-page\">\n          <header className='home-header'>\n            <text> \n                POMODOER\n            </text>\n          </header>\n          <div className = 'room-form'>\n            <input\n                type = \"text\"\n                placeholder = \"enter room name...\"\n                value = {roomName}\n                onChange={handleRoomNameChange}\n                className = \"input-field\"\n            />   \n          </div>\n          <div className='button'>\n            <Link to ={`/${roomName}`} className='join-button'> \n              join room\n            </Link>\n          </div>\n      </div>\n  )\n}\n\nexport default Home;","import React, {useState,useEffect,useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst PASSWORD_PLEASE = 'requestPassword';\nconst ADD_PASSWORD = 'addPassword';\n\nconst useCollab = (roomId) => {\n    const socketRef = useRef();\n    const [databasePassword, setDatabasePassword] = useState('')\n  \n    useEffect(() => {\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n\n        //listens for password from server\n        socketRef.current.on(PASSWORD_PLEASE, (data) => {\n            setDatabasePassword(data)\n            console.log('password data',JSON.stringify(data))\n        });\n        \n          \n    })\n\n  \n    const sendPassword = (password) => {\n        socketRef.current.emit(ADD_PASSWORD, {\n            password: password\n        });\n    }\n    // useEffect(()=>{\n      \n  \n   return {databasePassword, sendPassword}  \n    \n}\n\nexport default useCollab","import {useEffect, useRef, useState} from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_TASK_EVENT = 'newTaskItem';\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\nconst STATUS_CHANGE = 'statusChange'\nconst CLEAR_COMPLETE = 'clearCompleteTasks'\nconst SENDING_USER_ID = 'sendId'\nconst useList = (roomId) => {\n    const [tasks, setTasks] = useState([]);\n    const [statuses, setStatuses] = useState([]);\n    const socketRef = useRef();\n    // console.log('tasks after useList called', tasks)\n\n    useEffect(()=> {\n        console.log('creating new websocket connection');\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n\n        // listens for incoming tasks\n        socketRef.current.on(NEW_TASK_EVENT, (task) => {\n            const incomingTask = {\n                ...task,\n                ownedByCurrentUser: task.senderId === socketRef.current.id\n            };\n\n            //adds task to tasks list, adds corresponding status to statuses\n            setTasks((tasks) => [...tasks, incomingTask])\n            const copy = [...statuses];\n            copy.push(false);\n            setStatuses((statuses) => [...statuses, false])\n\n        });\n\n\n        // listens for population \n        socketRef.current.on('populate', (data) => {\n\n            // console.log('populate',data)\n            // console.log(data.length)\n\n            const savedTasks = [...tasks]\n            for (let i=0; i < data.length; i++) {\n                savedTasks.push(data[i])\n            }\n\n            for (let i=0; i<savedTasks.length; i++) {\n                if (savedTasks[i].senderId === socketRef.current.id) {\n                    savedTasks[i].ownedByCurrentUser = true\n                } else { \n                    savedTasks[i].ownedByCurrentUser = false\n                }\n            }\n\n\n            // console.log('saved tasks', savedTasks)\n            setTasks(savedTasks);\n                \n    \n            \n        })\n\n        // listens for status changes\n        socketRef.current.on(STATUS_CHANGE, (data) => {\n            const copy = [...data.status]\n            copy[data.index] = !copy[data.index];\n            setStatuses(copy);\n        })\n\n        // listens for connection\n        socketRef.current.on('connect', ()=>{\n            // console.log(socketRef.current.id)\n            sendId(socketRef.current.id)\n            //maybe add population in here?\n\n        });\n\n        // socketRef.current.on(SENDING_USER_ID, (data) => {\n        //     console.log('listening for sending user id', data)\n        // })\n\n        // listens for clear \n        socketRef.current.on(CLEAR_COMPLETE, (data) => {\n            const indices = []\n            const statusesCopy = []\n            for (let i=0; i < data.status.length; i++) {\n                if (data.status[i] === true) {\n                    indices.push(i)\n                } else {\n                    statusesCopy.push(false)\n                }\n            }\n\n            setStatuses(statusesCopy)\n            // setCompleteIndices(indices)\n            \n\n            // using indices to delete corresponding tasks\n            const copy = [...data.tasks]\n            for (let i=indices.length-1; i>(-1);i--) {\n                copy.splice(indices[i],1)\n            }\n            \n            // corrects owner association\n            for (let i=0; i<copy.length; i++) {\n                if (copy[i].senderId === socketRef.current.id) {\n                    copy[i].ownedByCurrentUser = true\n                } else { \n                    copy[i].ownedByCurrentUser = false\n                }\n            }\n\n            setTasks(copy);\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    //sends message to server that forwards to all users in room\n    const sendTask = (taskBody) => {\n        socketRef.current.emit(NEW_TASK_EVENT, {\n            body: taskBody,\n            senderId: socketRef.current.id,\n            statuses: statuses\n        });\n    }\n\n    // sends user Id to server\n    const sendId = (userId) => {\n        socketRef.current.emit(SENDING_USER_ID, {\n            userId: userId\n        });\n    }\n\n    //sends status change to server\n    const sendStatus = (index,statuses) => {\n        socketRef.current.emit(STATUS_CHANGE, {\n            index: index,\n            status: statuses,\n        })\n    }\n\n    //sends clear notif to server\n    const sendClear = (statuses,tasks) => {\n        socketRef.current.emit(CLEAR_COMPLETE, {\n            status: statuses,\n            tasks: tasks,\n        }) \n    }\n\n    // const populateTasks = (tasks) => {\n    //     socketRef.current.emit('populate', {\n    //         tasks:tasks,\n    //     })\n    // }\n\n\n    return {tasks, sendTask, statuses, sendStatus, sendClear}\n}\n\nexport default useList","import React from 'react';\n\nimport useList from './useList';\nimport './ToDoList.css';\nimport Button from 'react-bootstrap/Button';\n\nconst ToDoList = (props) => {\n    const roomId =  props.room; // gets roomId from props\n    // console.log('roomId', roomId)\n    const {tasks, sendTask, statuses, sendStatus, sendClear} = useList(roomId);\n    const [newTask, setNewTask] = React.useState(\"\");\n    \n\n    // handles typing input\n    const handleChange = (e) => {\n        setNewTask(e.target.value);\n    }\n\n    //need tasks to updated here every time someone joins a room\n    \n    // sends task to server so it shows up for both people\n    const handleSubmit = () => {\n        sendTask(newTask);\n        setNewTask('');\n    }\n\n    // makes it so that hitting the enter key also works for submission\n    const handleEnter = (e) => {\n        if (e.key === 'Enter') {\n            handleSubmit()\n        }\n    }\n\n    // on click of task, sends statuses and index so that statuses can be updated\n    const handleClick = (e) => {\n        // console.log('handleClick');\n        e.preventDefault();\n        const index = e.currentTarget.id;\n        sendStatus(index,statuses)\n    }\n\n    // console.log('tasks before clear',tasks)\n    // on click of clear, updates and sends tasks and statuses to server\n    const handleClear = () => {\n        // console.log('handleClear called')\n        sendClear(statuses,tasks);\n        // console.log('tasks after clear',tasks)\n    }\n    // console.log('about to render', tasks);\n\n    return (\n        <div className='taskList-page'>\n            <div className='ToDoForm'>\n                <div className=\"toDoFormTitle\">\n                    <p>TASKS:</p>\n                </div>\n                <input\n                    value={newTask}\n                    type='text'\n                    onChange={handleChange}\n                    placeholder=\"add a task...\"\n                    onKeyPress={handleEnter}\n                    className='taskInput'\n                ></input>\n                <Button variant='tertiary' className = 'addTask' onClick={handleSubmit}>ADD</Button>\n            </div>\n            \n            <div className='tasks-container'>\n                \n                <ul className='checklist'>\n                    <p>TO DO:</p>\n                    {tasks.map((task,i)=> {\n                        // console.log(task, i)\n                        return (\n                        <li\n                            key={i}\n                            id={i}\n                            className= {`todo ${task.ownedByCurrentUser ? \"my-task\" : \"other-task\"} ${statuses[i] ? \"strike\" : \"\"} ${task.status ? \"strike\": \"\"}`}\n                            onClick={handleClick}\n                \n                        >\n                            {task.body}\n                        </li>\n                        \n                    )})}\n                </ul>\n            </div>\n            <Button className='center' variant='primary' onClick={handleClear}>CLEAR</Button>     \n        </div>\n    );\n};\n\nexport default ToDoList;","import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\n\nconst useTimer = (roomId) => {\n    \n    // initialize states + refs\n\n    // is the timer started?\n    const [start, setStart] = useState(false);\n    // is the timer in work mode or rest mode?\n    const [work, setWork] = useState(true);\n    // who is the current user interacting with client\n    const socketRef = useRef();\n    // is the alarm supposed to be going off?\n    const [alarmSound, setAlarmSound] = useState(false)\n    // has initial info been received from teh server\n    const [infoReceived, setInfoReceived] = useState(false)\n    // what was the timer at the last time someone pressed start/stop or work/rest?\n    const [countdown, setCountdown] = useState(1500000)\n    // what was the time the last time someone pressed a button\n    const [clock, setClock] = useState(1614986917000)\n    // what should the timer be displaying (in ms)\n    const [display, setDisplay] = useState(1500000)\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n\n        //receives info from server on connection if info has not been received yet\n        if (infoReceived === false) {\n            socketRef.current.on(POPULATE_TIMER, (data) => {\n                setStart(data.action)\n                setCountdown(data.countdown)\n                setDisplay(data.countdown)\n                setClock(data.clock)\n                setInfoReceived(true)\n                calculateTime(true, data.action, data.countdown, data.clock);\n                // console.log('connection information received', data)\n            });\n        }\n\n        // listens for info from database that is emitted when start/stop button is pushed, \n        // when work/rest button is pushed, or when timer counts down to zero\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            setCountdown(data.countdown)\n            setClock(data.clock)\n            setStart(data.action)\n            calculateTime(true, data.action, data.countdown, data.clock);\n            // console.log('information received', data)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            setWork(data.work)\n            if (data.work) {\n                setDisplay(300000);\n                setCountdown(300000);\n                setClock(data.clock);\n              } else {\n                setDisplay(1500000);\n                setCountdown(1500000);\n                setClock(data.clock);\n              }\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    // calculates timer time in ms based on server data\n    const calculateTime = (currentInfoReceived, currentStart, currentCountdown, currentClock) => {\n        if (currentInfoReceived) {\n            if (!currentStart) {\n                setDisplay(currentCountdown)\n            } else {\n                const difference = Date.now()-currentClock\n                setDisplay(Math.max(0,currentCountdown-difference))\n                // console.log('difference',difference)\n                // console.log('currentDate',Date.now())\n            }\n        }\n    } \n\n    // checks if alarm should be sounding\n    const checkAlarm = () => {\n        if (infoReceived === true) {\n            if (display === 0 && !alarmSound) {\n                // console.log('ALARM IS SOUNDING')\n                setAlarmSound(true)\n                const newWork = work;\n                sendWork(newWork);\n            } else if (alarmSound) {\n                setAlarmSound(false)\n            }\n        }\n    }\n\n    // calls calculateTime and checkAlarm every second\n    useEffect(() => {\n\n       if (start) {\n        const foobar = setInterval(()=> {\n            // console.log(countdown, clock, 'doing things')\n            calculateTime(infoReceived, start, countdown, clock);\n            checkAlarm();\n        }, 1000 )\n        return function cleanup() {\n            clearInterval(foobar)\n        }\n       }\n    \n    });\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        const newStart = !start;\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: newStart,\n            countdown: display,\n            clock: Date.now()\n        });\n        setStart(newStart);\n    }\n\n    // sends work status to server and alters display time when work/rest is clicked or timer hits 0\n    const sendWork = (work) => {\n        // console.log('is it work?', work)\n        const newWork = !work;\n        // console.log('is it work now?', newWork);\n        const newClock = Date.now();\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: newWork,\n            clock: newClock\n        })\n        setWork(newWork);\n        if (newWork) {\n            // console.log('because it is work, set to 25')\n            setDisplay(1500000);\n            setCountdown(1500000);\n            setClock(newClock);\n          } else {\n            // console.log('because it is not work, set to 5')\n            setDisplay(300000);\n            setCountdown(300000);\n            setClock(newClock);\n          }\n    }\n\n    return {start, sendStart, work, sendWork, display, alarmSound, infoReceived}\n}\n\nexport default useTimer\n\n","export default __webpack_public_path__ + \"static/media/alarm_chime.9beb22e7.mp3\";","import React, {useEffect} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport useTimer from './useTimer';\nimport './ToDoList.css'\nimport useSound from 'use-sound';\nimport audio from './alarm_chime.mp3'\n// import { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react-dom';\n\nvar context = new AudioContext();\n\nconst OurTimer = (props) => {\n  const roomId =  props.room;\n  const {start, sendStart, work, sendWork, display, alarmSound, infoReceived} = useTimer(roomId)\n\n  \n  const [playSound] = useSound(\n    audio,\n    { volume: 0.75 }\n  );\n\n  const conditionalPlay = () => {\n    console.log(alarmSound)\n    if (alarmSound===true) {\n      playSound()\n    }\n  }\n\n  useEffect(conditionalPlay,[alarmSound])\n\n  //click handlers\n  const handleStart = () => {\n    context.resume()\n    sendStart(start);\n  }\n  const handleWork = () => {\n    sendWork(work)\n  }\n\n  //variables for display\n  let startStatus = (start ? 'STOP' : 'START');\n  let workStatus = (work ? 'REST' : 'WORK');\n  //adds zero when seconds gets into single digits\n\n\n  if (infoReceived === false) {\n    return (\n      <section>\n\n          <section className=\"timerTimer\">\n  \n        </section> \n      </section>\n    )\n  } else {\n    const minutes = Math.floor(display/1000/60);\n    const seconds = Math.floor((display/1000) % 60);\n    let secondsDisplay;\n    if (seconds < 10) {\n      secondsDisplay = '0'+seconds\n    } else {\n      secondsDisplay = seconds\n    }\n    \n    const time = minutes + ':' + secondsDisplay\n    const newTitle =  time + ' POMODOER'\n    if (document.title !== newTitle) {\n      document.title = newTitle;\n    }\n    return (\n    \n      <section>\n          \n          <section className=\"timerTimer\">\n            <div>\n              <div className = 'buttons'>\n                <Button variant=\"secondary\" className='startButton' onClick={handleStart} >{startStatus} </Button>{' '}\n                <Button variant=\"secondary\" className='workButton'onClick ={handleWork} >{workStatus}</Button>{' '} \n              </div> \n              <h1 className='timerMargin'>{time}</h1>\n            </div>\n  \n        </section> \n      </section>\n    )\n  }\n}\n\nexport default OurTimer\n","import React, {useState,useEffect,useRef} from 'react';\nimport useCollab from './useCollab';\nimport ToDoList from \"./ToDoList\"\nimport './ToDoList.css';\nimport Button from 'react-bootstrap/Button'\n\nimport {Link} from 'react-router-dom'\n\nimport OurTimer from './Timer';\n\nconst Collab = (props) => {\n  const {roomId} =  props.match.params;\n  const {databasePassword, sendPassword} = useCollab(roomId)\n  const [password, setPassword] = useState('')\n  const [askForPassword, setAskForPassword] = useState(true);\n  const [wrongPassword, setWrongPassword] = useState(false);\n  const [display, setDisplay] = useState(true)\n\n\n  // updates password with the value from the \n  const handleChange = (e) => {\n      setPassword(e.target.value);\n  }\n\n  // if click room, displays password\n  const handlePress = () => {\n    const newDisplay = !display\n    // roomStatus = newDisplay ? 'ROOM'+roomId : databasePassword\n    setDisplay(newDisplay)\n    console.log('handlePress',roomStatus)\n  }\n\n  let roomStatus = display ? 'ROOM: '+roomId : 'PASSWORD: '+databasePassword \n\n\n  // sends task to server so it shows up for both people\n  const handleSubmit = () => {\n    // sendTask(newTask);\n    // setNewTask('')\n    // if password = password from database, set askForPassword to false\n    // if there is no password in database, send {password} to database database and set askForPassword to false\n    // else, if password !== password from database, set askForPassword to true + display \"wrong password\"\n    if (password === databasePassword) {\n      setAskForPassword(false)\n    } else if (databasePassword === 'nothing yet') {\n      setAskForPassword(false)\n      sendPassword(password)\n    } else if (password !== databasePassword){\n      setWrongPassword(true)\n    }\n  }\n\n  // makes it so that hitting the enter key also works for submission\n  const handleEnter = (e) => {\n      if (e.key === 'Enter') {\n          handleSubmit()\n     }\n  }\n\n  if (askForPassword && !wrongPassword) {\n    return (\n      <div className='passwordPage'>\n        <h3> ENTER PASSWORD:</h3>\n        <div className = 'passwordForm'>\n          <input\n            onChange = {handleChange}\n            value = {password}\n            type='text'\n            placeholder='enter a password...'\n            onKeyDown = {handleEnter}\n            className = 'passwordBar'\n          ></input>\n          <Button variant='tertiary' className = 'addTask' onClick={handleSubmit}>ENTER</Button>\n        </div>\n      </div>\n    );\n  } else if (wrongPassword && askForPassword) {\n    return (\n      <div className='passwordPage'>\n        <h3> ENTER PASSWORD:</h3>\n        <div className = 'passwordForm'>\n          <input\n            onChange = {handleChange}\n            value = {password}\n            type='text'\n            placeholder='enter a password...'\n            onKeyDown = {handleEnter}\n            className = 'passwordBar'\n          ></input>\n          <Button variant='tertiary' className = 'addTask' onClick={handleSubmit}>ENTER</Button>\n        </div>\n         <p className='alert'>WRONG PASSWORD</p>\n      </div>\n    ); \n  } else {\n    return (\n      <div className=\"App\">\n          <div className=\"App-header\">\n            <header className='collab-header'>\n              <Link to ={`/`} className='home-button'> \n                <h1 className='pomodoer'>\n                  POMODOER\n                </h1> \n              </Link>\n            </header>\n         </div>\n          <div className='timer'>\n            <OurTimer room={roomId}/> \n          </div>\n          <h2 className='room' onClick = {handlePress}>{roomStatus}</h2>\n          <ToDoList room={roomId}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default Collab;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport Home from \"./Home/Home\";\nimport Collab from \"./Collab\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/:roomId\" component={Collab}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    < App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}