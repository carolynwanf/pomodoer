{"ast":null,"code":"import _slicedToArray from\"/Users/bubird/Documents/GitHub/pomodoer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useRef}from'react';import socketIOClient from'socket.io-client';//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\nvar SOCKET_SERVER_URL='http://localhost:5000';var TIMER_START_STOP='timerPush';var TIMER_WORK_REST='workRestPush';var useTimer=function useTimer(roomId){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),start=_useState2[0],setStart=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),work=_useState4[0],setWork=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),minutes=_useState6[0],setMinutes=_useState6[1];var _useState7=useState(30),_useState8=_slicedToArray(_useState7,2),seconds=_useState8[0],setSeconds=_useState8[1];var socketRef=useRef();//function for decrementing timer\nvar decrement=function decrement(){if(start===true){var intervalId=setInterval(function(){setSeconds(function(prev){return prev-1;});},1000);return function(){clearInterval(intervalId);};}};//calls decrement every time start changes\nuseEffect(decrement,[start]);//function for adjusting display time\nvar time=function time(){if(start===true){if(seconds===-1&&minutes!==0){setSeconds(59);setMinutes(function(prev){return prev-1;});}else if(minutes===0&&seconds===-1&&work===true){setMinutes(5);setSeconds(0);setWork(false);}else if(minutes===0&&seconds===-1&&work===false){setMinutes(0);setSeconds(30);setWork(true);}}};//calls time on every re-render\nuseEffect(time,[seconds]);useEffect(function(){// creates websocket connection\nsocketRef.current=socketIOClient(SOCKET_SERVER_URL,{query:{roomId:roomId}});// listens for timer start/stop push\nsocketRef.current.on(TIMER_START_STOP,function(data){setStart(!data.start);});socketRef.current.on(TIMER_WORK_REST,function(data){var work=data.work;setWork(!work);if(work===true){setMinutes(5);setSeconds(0);}else{setMinutes(0);setSeconds(30);}});// destroy socket reference when the connection is closed\nreturn function(){socketRef.current.disconnect();};},[roomId,start]);//sends message to server that forwards to all users in room\nvar sendStart=function sendStart(start){socketRef.current.emit(TIMER_START_STOP,{start:start});};var sendWork=function sendWork(work){socketRef.current.emit(TIMER_WORK_REST,{work:work});};return{start:start,sendStart:sendStart,work:work,sendWork:sendWork,minutes:minutes,seconds:seconds};};export default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","decrement","intervalId","setInterval","prev","clearInterval","time","current","query","on","data","disconnect","sendStart","emit","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(0);\n    const [seconds, setSeconds] = useState(30);\n    const socketRef = useRef();\n\n    //function for decrementing timer\n    const decrement = () => {\n        if (start === true) {\n        const intervalId = setInterval(() => {\n            setSeconds((prev) => prev - 1);\n        }, 1000);\n        return () => {\n            clearInterval(intervalId);\n        };\n        }\n    }\n\n    //calls decrement every time start changes\n    useEffect(decrement, [start]);\n\n    //function for adjusting display time\n    const time = () => {\n        if (start === true){\n          if (seconds === -1 && minutes !== 0) {\n            setSeconds(59);\n            setMinutes((prev) => prev - 1);\n          } else if (minutes === 0 && seconds === -1 && work === true) {\n            setMinutes(5);\n            setSeconds(0);\n            setWork(false);\n          } else if (minutes === 0 && seconds === -1 && work === false) {\n            setMinutes(0);\n            setSeconds(30);\n            setWork(true);\n          }\n        }\n    }\n\n    //calls time on every re-render\n    useEffect(time, [seconds]);\n\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n        })\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(0);\n                setSeconds(30);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,start]);\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n\n    return {start, sendStart, work, sendWork, minutes, seconds}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}