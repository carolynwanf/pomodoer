{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport useSound from 'use-sound';\nimport audio from './alarm_chime.mp3'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = roomId => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(10);\n  const socketRef = useRef();\n  console.log(audio); //function for decrementing timer\n\n  const decrement = () => {\n    if (start === true) {\n      const intervalId = setInterval(() => {\n        setSeconds(prev => prev - 1);\n      }, 1000);\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }; //calls decrement every time start changes\n\n\n  useEffect(decrement, [start]); //function for adjusting display time\n\n  const time = () => {\n    _s();\n\n    if (start === true) {\n      if (seconds === -1 && minutes !== 0) {\n        setSeconds(59);\n        setMinutes(prev => prev - 1);\n      } else if (minutes === 0 && seconds === -1 && work === true) {\n        setMinutes(5);\n        setSeconds(0);\n        setWork(false);\n        useSound(audio);\n      } else if (minutes === 0 && seconds === -1 && work === false) {\n        setMinutes(25);\n        setSeconds(0);\n        setWork(true);\n        useSound(audio);\n      }\n    }\n  }; //calls time on every re-render\n\n\n  _s(time, \"iVxAvuaHg9pdvEJehqDHNxr93CM=\", false, function () {\n    return [useSound, useSound];\n  });\n\n  useEffect(time, [seconds]);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, start]); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds\n  };\n};\n\n_s2(useTimer, \"u/dC4g9mT7hymtDcej3IiTlzZUE=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","useSound","audio","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","console","log","decrement","intervalId","setInterval","prev","clearInterval","time","current","query","on","data","disconnect","sendStart","emit","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\nimport useSound from 'use-sound';\nimport audio from './alarm_chime.mp3'\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(0);\n    const [seconds, setSeconds] = useState(10);\n    const socketRef = useRef();\n\n    console.log(audio)\n\n    //function for decrementing timer\n    const decrement = () => {\n        if (start === true) {\n        const intervalId = setInterval(() => {\n            setSeconds((prev) => prev - 1);\n        }, 1000);\n        return () => {\n            clearInterval(intervalId);\n        };\n        }\n    }\n\n    //calls decrement every time start changes\n    useEffect(decrement, [start]);\n\n\n\n    //function for adjusting display time\n    const time = () => {\n        if (start === true){\n          if (seconds === -1 && minutes !== 0) {\n            setSeconds(59);\n            setMinutes((prev) => prev - 1);\n          } else if (minutes === 0 && seconds === -1 && work === true) {\n            setMinutes(5);\n            setSeconds(0);\n            setWork(false);\n            useSound(audio)\n          } else if (minutes === 0 && seconds === -1 && work === false) {\n            setMinutes(25);\n            setSeconds(0);\n            setWork(true);\n            useSound(audio)\n          }\n        }\n    }\n\n    //calls time on every re-render\n    useEffect(time, [seconds]);\n\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n        })\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,start]);\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n\n    return {start, sendStart, work, sendWork, minutes, seconds}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}