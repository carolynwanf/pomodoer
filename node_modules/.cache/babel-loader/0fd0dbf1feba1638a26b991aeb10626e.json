{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const socketRef = useRef();\n  const [alarmSound, setAlarmSound] = useState(false);\n  const [infoReceived, setInfoReceived] = useState(false); //initialize these after info pulled from server?\n\n  const [action, setAction] = useState(false);\n  const [countdown, setCountdown] = useState(1500000);\n  const [clock, setClock] = useState(1614986917000);\n  const [display, setDisplay] = useState(1500000);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n      console.log('start/stop received');\n    }); //listens for information on connection\n\n    socketRef.current.on('firstSend', data => {\n      setAction(data.action);\n      setCountdown(data.countdown);\n      setDisplay(data.countdown);\n      setClock(data.clock);\n      setStart(data.action);\n      console.log('connection information received', data);\n      setInfoReceived(true);\n    }); //listens for information\n\n    socketRef.current.on(INFORMATION_TO_CLIENT, data => {\n      setAction(data.action);\n      setCountdown(data.countdown);\n      setClock(data.clock);\n      setStart(data.action);\n      console.log('information received', data);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]); //calculates display time in ms based on server data\n\n  const calculateTime = () => {\n    if (action === false) {\n      setDisplay(countdown);\n      console.log('setting display', display, countdown);\n    } else {\n      const difference = Date.now() - clock;\n      setDisplay(Math.max(0, countdown - difference));\n      console.log('difference', difference);\n      console.log('currentDate', Date.now());\n    }\n\n    console.log('inside caluclateTime', display);\n  };\n\n  const convert = () => {\n    setMinutes(Math.floor(display / 1000 / 60));\n    console.log('between setting minutes and seconds', display);\n    setSeconds(Math.floor(display / 1000 % 60));\n    console.log('inside conversion', display, minutes, seconds);\n\n    if (minutes === seconds === 0) {\n      setAlarmSound(true);\n      setWork(!work);\n      socketRef.current.emit(TIMER_WORK_REST, {\n        work: work\n      });\n      console.log('inside conditional in conversion');\n    } else {\n      setAlarmSound(false);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      calculateTime();\n      convert();\n    }, 0);\n  }); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start,\n      countdown: display\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    alarmSound,\n    infoReceived\n  };\n};\n\n_s(useTimer, \"NOZ3qPdD2GFkLLInw1+6C+ZKlfA=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","alarmSound","setAlarmSound","infoReceived","setInfoReceived","action","setAction","countdown","setCountdown","clock","setClock","display","setDisplay","current","query","on","data","console","log","disconnect","calculateTime","difference","Date","now","Math","max","convert","floor","emit","setTimeout","sendStart","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n    const [alarmSound, setAlarmSound] = useState(false)\n    const [infoReceived, setInfoReceived] = useState(false)\n\n    //initialize these after info pulled from server?\n\n    const [action,setAction] = useState(false)\n    const [countdown, setCountdown] = useState(1500000)\n    const [clock, setClock] = useState(1614986917000)\n    const [display, setDisplay] = useState(1500000)\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n            console.log('start/stop received')\n        });\n\n        //listens for information on connection\n        socketRef.current.on('firstSend', (data) => {\n            setAction(data.action)\n            setCountdown(data.countdown)\n            setDisplay(data.countdown)\n            setClock(data.clock)\n            setStart(data.action)\n            console.log('connection information received', data)\n            setInfoReceived(true)\n        });\n\n        //listens for information\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            setAction(data.action)\n            setCountdown(data.countdown)\n            setClock(data.clock)\n            setStart(data.action)\n            console.log('information received', data)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    //calculates display time in ms based on server data\n    const calculateTime = () => {\n        if (action === false) {\n            setDisplay(countdown)\n            console.log('setting display',display,countdown)\n        } else {\n            const difference = Date.now()-clock\n            setDisplay(Math.max(0,countdown-difference))\n            console.log('difference',difference)\n            console.log('currentDate',Date.now())\n        }\n        console.log('inside caluclateTime',display)\n    } \n\n    const convert = () => {\n        setMinutes(Math.floor(display/1000/60))\n        console.log('between setting minutes and seconds', display)\n        setSeconds(Math.floor ((display/1000) % 60))\n        console.log('inside conversion', display, minutes, seconds)\n        if (minutes === seconds === 0) {\n            setAlarmSound(true)\n            setWork(!work)\n            socketRef.current.emit(TIMER_WORK_REST, {\n                work:work\n            })\n            console.log('inside conditional in conversion' )\n        } else {\n            setAlarmSound(false)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            calculateTime();\n            convert();\n        }, 0);\n    })\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start,\n            countdown: display,\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n    return {start, sendStart, work, sendWork, minutes, seconds, alarmSound, infoReceived}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}