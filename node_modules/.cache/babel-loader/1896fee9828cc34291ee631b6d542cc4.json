{"ast":null,"code":"import _slicedToArray from\"/Users/bubird/Documents/GitHub/pomodoer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useRef}from'react';import socketIOClient from'socket.io-client';//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\nvar SOCKET_SERVER_URL='http://localhost:5000';var TIMER_START_STOP='timerPush';var TIMER_WORK_REST='workRestPush';var INFORMATION_TO_CLIENT='sendInfo';var POPULATE_TIMER='populateTimer';var useTimer=function useTimer(roomId){// initialize states + refs\n// is the timer started?\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),start=_useState2[0],setStart=_useState2[1];// is the timer in work mode or rest mode?\nvar _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),work=_useState4[0],setWork=_useState4[1];// who is the current user interacting with client\nvar socketRef=useRef();// is the alarm supposed to be going off?\nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),alarmSound=_useState6[0],setAlarmSound=_useState6[1];// has initial info been received from teh server\nvar _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),infoReceived=_useState8[0],setInfoReceived=_useState8[1];// what was the timer at the last time someone pressed start/stop or work/rest?\nvar _useState9=useState(1500000),_useState10=_slicedToArray(_useState9,2),countdown=_useState10[0],setCountdown=_useState10[1];// what was the time the last time someone pressed a button\nvar _useState11=useState(1614986917000),_useState12=_slicedToArray(_useState11,2),clock=_useState12[0],setClock=_useState12[1];// what should the timer be displaying (in ms)\nvar _useState13=useState(1500000),_useState14=_slicedToArray(_useState13,2),display=_useState14[0],setDisplay=_useState14[1];useEffect(function(){// creates websocket connection\nsocketRef.current=socketIOClient(SOCKET_SERVER_URL,{query:{roomId:roomId}});//receives info from server on connection if info has not been received yet\nif(infoReceived===false){socketRef.current.on(POPULATE_TIMER,function(data){setStart(data.action);setCountdown(data.countdown);setDisplay(data.countdown);setClock(data.clock);setInfoReceived(true);calculateTime(true,data.action,data.countdown,data.clock);// console.log('connection information received', data)\n});}// listens for info from database that is emitted when start/stop button is pushed, \n// when work/rest button is pushed, or when timer counts down to zero\nsocketRef.current.on(INFORMATION_TO_CLIENT,function(data){setCountdown(data.countdown);setClock(data.clock);setStart(data.action);calculateTime(true,data.action,data.countdown,data.clock);// console.log('information received', data)\n});socketRef.current.on(TIMER_WORK_REST,function(data){setWork(data.work);if(data.work){setDisplay(300000);setCountdown(300000);setClock(data.clock);}else{setDisplay(1500000);setCountdown(1500000);setClock(data.clock);}});// destroy socket reference when the connection is closed\nreturn function(){socketRef.current.disconnect();};},[roomId]);// calculates timer time in ms based on server data\nvar calculateTime=function calculateTime(currentInfoReceived,currentStart,currentCountdown,currentClock){if(currentInfoReceived){if(!currentStart){setDisplay(currentCountdown);}else{var difference=Date.now()-currentClock;setDisplay(Math.max(0,currentCountdown-difference));// console.log('difference',difference)\n// console.log('currentDate',Date.now())\n}}};// checks if alarm should be sounding\nvar checkAlarm=function checkAlarm(){if(infoReceived===true){if(display===0&&!alarmSound){// console.log('ALARM IS SOUNDING')\nsetAlarmSound(true);var newWork=work;sendWork(newWork);}else if(alarmSound){setAlarmSound(false);}}};// calls calculateTime and checkAlarm every second\nuseEffect(function(){if(start){var foobar=setInterval(function(){// console.log(countdown, clock, 'doing things')\ncalculateTime(infoReceived,start,countdown,clock);checkAlarm();},1000);return function cleanup(){clearInterval(foobar);};}});//sends message to server that forwards to all users in room\nvar sendStart=function sendStart(start){var newStart=!start;socketRef.current.emit(TIMER_START_STOP,{start:newStart,countdown:display,clock:Date.now()});setStart(newStart);};// sends work status to server and alters display time when work/rest is clicked or timer hits 0\nvar sendWork=function sendWork(work){// console.log('is it work?', work)\nvar newWork=!work;// console.log('is it work now?', newWork);\nvar newClock=Date.now();socketRef.current.emit(TIMER_WORK_REST,{work:newWork,clock:newClock});setWork(newWork);if(newWork){// console.log('because it is work, set to 25')\nsetDisplay(1500000);setCountdown(1500000);setClock(newClock);}else{// console.log('because it is not work, set to 5')\nsetDisplay(300000);setCountdown(300000);setClock(newClock);}};return{start:start,sendStart:sendStart,work:work,sendWork:sendWork,display:display,alarmSound:alarmSound,infoReceived:infoReceived};};export default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","POPULATE_TIMER","useTimer","roomId","start","setStart","work","setWork","socketRef","alarmSound","setAlarmSound","infoReceived","setInfoReceived","countdown","setCountdown","clock","setClock","display","setDisplay","current","query","on","data","action","calculateTime","disconnect","currentInfoReceived","currentStart","currentCountdown","currentClock","difference","Date","now","Math","max","checkAlarm","newWork","sendWork","foobar","setInterval","cleanup","clearInterval","sendStart","newStart","emit","newClock"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\n\nconst useTimer = (roomId) => {\n    \n    // initialize states + refs\n\n    // is the timer started?\n    const [start, setStart] = useState(false);\n    // is the timer in work mode or rest mode?\n    const [work, setWork] = useState(true);\n    // who is the current user interacting with client\n    const socketRef = useRef();\n    // is the alarm supposed to be going off?\n    const [alarmSound, setAlarmSound] = useState(false)\n    // has initial info been received from teh server\n    const [infoReceived, setInfoReceived] = useState(false)\n    // what was the timer at the last time someone pressed start/stop or work/rest?\n    const [countdown, setCountdown] = useState(1500000)\n    // what was the time the last time someone pressed a button\n    const [clock, setClock] = useState(1614986917000)\n    // what should the timer be displaying (in ms)\n    const [display, setDisplay] = useState(1500000)\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n\n        //receives info from server on connection if info has not been received yet\n        if (infoReceived === false) {\n            socketRef.current.on(POPULATE_TIMER, (data) => {\n                setStart(data.action)\n                setCountdown(data.countdown)\n                setDisplay(data.countdown)\n                setClock(data.clock)\n                setInfoReceived(true)\n                calculateTime(true, data.action, data.countdown, data.clock);\n                // console.log('connection information received', data)\n            });\n        }\n\n        // listens for info from database that is emitted when start/stop button is pushed, \n        // when work/rest button is pushed, or when timer counts down to zero\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            setCountdown(data.countdown)\n            setClock(data.clock)\n            setStart(data.action)\n            calculateTime(true, data.action, data.countdown, data.clock);\n            // console.log('information received', data)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            setWork(data.work)\n            if (data.work) {\n                setDisplay(300000);\n                setCountdown(300000);\n                setClock(data.clock);\n              } else {\n                setDisplay(1500000);\n                setCountdown(1500000);\n                setClock(data.clock);\n              }\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    // calculates timer time in ms based on server data\n    const calculateTime = (currentInfoReceived, currentStart, currentCountdown, currentClock) => {\n        if (currentInfoReceived) {\n            if (!currentStart) {\n                setDisplay(currentCountdown)\n            } else {\n                const difference = Date.now()-currentClock\n                setDisplay(Math.max(0,currentCountdown-difference))\n                // console.log('difference',difference)\n                // console.log('currentDate',Date.now())\n            }\n        }\n    } \n\n    // checks if alarm should be sounding\n    const checkAlarm = () => {\n        if (infoReceived === true) {\n            if (display === 0 && !alarmSound) {\n                // console.log('ALARM IS SOUNDING')\n                setAlarmSound(true)\n                const newWork = work;\n                sendWork(newWork);\n            } else if (alarmSound) {\n                setAlarmSound(false)\n            }\n        }\n    }\n\n    // calls calculateTime and checkAlarm every second\n    useEffect(() => {\n\n       if (start) {\n        const foobar = setInterval(()=> {\n            // console.log(countdown, clock, 'doing things')\n            calculateTime(infoReceived, start, countdown, clock);\n            checkAlarm();\n        }, 1000 )\n        return function cleanup() {\n            clearInterval(foobar)\n        }\n       }\n    \n    });\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        const newStart = !start;\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: newStart,\n            countdown: display,\n            clock: Date.now()\n        });\n        setStart(newStart);\n    }\n\n    // sends work status to server and alters display time when work/rest is clicked or timer hits 0\n    const sendWork = (work) => {\n        // console.log('is it work?', work)\n        const newWork = !work;\n        // console.log('is it work now?', newWork);\n        const newClock = Date.now();\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: newWork,\n            clock: newClock\n        })\n        setWork(newWork);\n        if (newWork) {\n            // console.log('because it is work, set to 25')\n            setDisplay(1500000);\n            setCountdown(1500000);\n            setClock(newClock);\n          } else {\n            // console.log('because it is not work, set to 5')\n            setDisplay(300000);\n            setCountdown(300000);\n            setClock(newClock);\n          }\n    }\n\n    return {start, sendStart, work, sendWork, display, alarmSound, infoReceived}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}