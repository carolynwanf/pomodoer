{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const socketRef = useRef();\n  const [alarmSound, setAlarmSound] = useState(false); //initialize these after info pulled from server?\n\n  var tempAction = false;\n  var tempCountdown = 0;\n  var tempClock = 0;\n  var tempDisplay = 0;\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n      console.log('start/stop received');\n    }); //listens for information\n\n    socketRef.current.on(INFORMATION_TO_CLIENT, data => {\n      tempAction = data.action;\n      tempCountdown = data.countdown;\n      tempClock = data.clock;\n      setStart(data.action);\n      console.log('information received', data);\n      console.log('temps', tempAction, tempCountdown, tempClock);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n  const [action, setAction] = useState(tempAction);\n  const [countdown, setCountdown] = useState(tempCountdown);\n  const [clock, setClock] = useState(tempClock);\n  var tempDisplay = 0;\n\n  if (action === false) {\n    tempDisplay = countdown;\n    console.log(countdown, tempDisplay);\n  } else {\n    const difference = Date.now() - clock;\n    tempDisplay = Math.max(0, countdown - difference);\n  }\n\n  const [display, setDisplay] = useState(tempDisplay); //calculates display time in ms based on server data\n\n  const calculateTime = () => {\n    if (action === false) {\n      setDisplay(countdown);\n    } else {\n      const difference = Date.now() - clock;\n      setDisplay(Math.max(0, countdown - difference));\n      console.log('difference', difference);\n      console.log('currentDate', Date.now());\n    }\n\n    console.log('inside caluclateTime', display);\n  };\n\n  const convert = () => {\n    setMinutes(Math.floor(display / 1000 / 60));\n    console.log('between setting minutes and seconds', display);\n    setSeconds(Math.floor(display / 1000 % 60));\n    console.log('inside conversion', display, minutes, seconds);\n\n    if (minutes === seconds === 0) {\n      setAlarmSound(true);\n      setWork(!work);\n      socketRef.current.emit(TIMER_WORK_REST, {\n        work: work\n      });\n      console.log('inside conditional in conversion');\n    } else {\n      setAlarmSound(false);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      calculateTime();\n      convert();\n    }, 0);\n  }); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start,\n      countdown: display\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    alarmSound\n  };\n};\n\n_s(useTimer, \"QfAoZKCAn9REDMcoN+Ba6/XVxHQ=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","alarmSound","setAlarmSound","tempAction","tempCountdown","tempClock","tempDisplay","current","query","on","data","console","log","action","countdown","clock","disconnect","setAction","setCountdown","setClock","difference","Date","now","Math","max","display","setDisplay","calculateTime","convert","floor","emit","setTimeout","sendStart","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n    const [alarmSound, setAlarmSound] = useState(false)\n\n    //initialize these after info pulled from server?\n\n    var tempAction = false\n    var tempCountdown = 0\n    var tempClock = 0\n    var tempDisplay = 0\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n            console.log('start/stop received')\n        });\n\n        //listens for information\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            tempAction = data.action\n            tempCountdown = data.countdown\n            tempClock = data.clock\n            setStart(data.action)\n            console.log('information received', data)\n            console.log('temps', tempAction, tempCountdown, tempClock)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    const [action,setAction] = useState(tempAction)\n    const [countdown, setCountdown] = useState(tempCountdown)\n    const [clock, setClock] = useState(tempClock)\n\n    var tempDisplay = 0\n    if (action === false) {\n        tempDisplay = countdown\n        console.log(countdown, tempDisplay)\n    } else {\n        const difference = Date.now()-clock\n        tempDisplay = Math.max(0,countdown-difference)\n    }\n\n    const [display, setDisplay] = useState(tempDisplay)\n\n    //calculates display time in ms based on server data\n    const calculateTime = () => {\n        if (action === false) {\n            setDisplay(countdown)\n        } else {\n            const difference = Date.now()-clock\n            setDisplay(Math.max(0,countdown-difference))\n            console.log('difference',difference)\n            console.log('currentDate',Date.now())\n        }\n        console.log('inside caluclateTime',display)\n    } \n\n    const convert = () => {\n        setMinutes(Math.floor(display/1000/60))\n        console.log('between setting minutes and seconds', display)\n        setSeconds(Math.floor ((display/1000) % 60))\n        console.log('inside conversion', display, minutes, seconds)\n        if (minutes === seconds === 0) {\n            setAlarmSound(true)\n            setWork(!work)\n            socketRef.current.emit(TIMER_WORK_REST, {\n                work:work\n            })\n            console.log('inside conditional in conversion' )\n        } else {\n            setAlarmSound(false)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            calculateTime();\n            convert();\n        }, 0);\n    })\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start,\n            countdown: display,\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n    return {start, sendStart, work, sendWork, minutes, seconds, alarmSound}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}