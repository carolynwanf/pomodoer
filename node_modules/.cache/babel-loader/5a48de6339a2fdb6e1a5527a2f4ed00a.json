{"ast":null,"code":"import _slicedToArray from\"/Users/bubird/Documents/GitHub/pomodoer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import useList from'./useList';import'./ToDoList.css';import Button from'react-bootstrap/Button';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ToDoList=function ToDoList(props){var roomId=props.room;// gets roomId from props\nconsole.log('roomId',roomId);var _useList=useList(roomId),tasks=_useList.tasks,sendTask=_useList.sendTask,statuses=_useList.statuses,sendStatus=_useList.sendStatus,sendClear=_useList.sendClear;var _React$useState=React.useState(\"\"),_React$useState2=_slicedToArray(_React$useState,2),newTask=_React$useState2[0],setNewTask=_React$useState2[1];// handles typing input\nvar handleChange=function handleChange(e){setNewTask(e.target.value);};//need tasks to updated here every time someone joins a room\n// sends task to server so it shows up for both people\nvar handleSubmit=function handleSubmit(){sendTask(newTask);setNewTask('');};// makes it so that hitting the enter key also works for submission\nvar handleEnter=function handleEnter(e){if(e.key==='Enter'){handleSubmit();}};// on click of task, sends statuses and index so that statuses can be updated\nvar handleClick=function handleClick(e){console.log('handleClick');e.preventDefault();var index=e.currentTarget.id;sendStatus(index,statuses);};// on click of clear, updates and sends tasks and statuses to server\nvar handleClear=function handleClear(){console.log('handleClear called');sendClear(statuses,tasks);};return/*#__PURE__*/_jsxs(\"div\",{className:\"taskList-page\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"ToDoForm\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"toDoFormTitle\",children:/*#__PURE__*/_jsx(\"p\",{children:\"TASKS:\"})}),/*#__PURE__*/_jsx(\"input\",{value:newTask,type:\"text\",onChange:handleChange,placeholder:\"add a task...\",onKeyPress:handleEnter,className:\"taskInput\"}),/*#__PURE__*/_jsx(Button,{variant:\"tertiary\",className:\"addTask\",onClick:handleSubmit,children:\"ADD\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"tasks-container\",children:/*#__PURE__*/_jsxs(\"ul\",{className:\"checklist\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"TO DO:\"}),tasks.map(function(task,i){return/*#__PURE__*/_jsx(\"li\",{id:i,className:\"todo \".concat(task.ownedByCurrentUser?\"my-task\":\"other-task\",\" \").concat(statuses[i]?\"strike\":\"\"),onClick:handleClick,children:task.body},i);})]})}),/*#__PURE__*/_jsx(Button,{className:\"center\",variant:\"primary\",onClick:handleClear,children:\"CLEAR\"})]});};export default ToDoList;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/ToDoList.js"],"names":["React","useList","Button","ToDoList","props","roomId","room","console","log","tasks","sendTask","statuses","sendStatus","sendClear","useState","newTask","setNewTask","handleChange","e","target","value","handleSubmit","handleEnter","key","handleClick","preventDefault","index","currentTarget","id","handleClear","map","task","i","ownedByCurrentUser","body"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport useList from './useList';\nimport './ToDoList.css';\nimport Button from 'react-bootstrap/Button';\n\nconst ToDoList = (props) => {\n    const roomId =  props.room; // gets roomId from props\n    console.log('roomId', roomId)\n    const {tasks, sendTask, statuses, sendStatus, sendClear} = useList(roomId);\n    const [newTask, setNewTask] = React.useState(\"\");\n\n    \n\n    // handles typing input\n    const handleChange = (e) => {\n        setNewTask(e.target.value);\n    }\n\n    //need tasks to updated here every time someone joins a room\n    \n    // sends task to server so it shows up for both people\n    const handleSubmit = () => {\n        sendTask(newTask);\n        setNewTask('');\n    }\n\n    // makes it so that hitting the enter key also works for submission\n    const handleEnter = (e) => {\n        if (e.key === 'Enter') {\n            handleSubmit()\n        }\n    }\n\n    // on click of task, sends statuses and index so that statuses can be updated\n    const handleClick = (e) => {\n        console.log('handleClick');\n        e.preventDefault();\n        const index = e.currentTarget.id;\n        sendStatus(index,statuses)\n    }\n\n    // on click of clear, updates and sends tasks and statuses to server\n    const handleClear = () => {\n        console.log('handleClear called')\n        sendClear(statuses,tasks);\n    }\n\n    return (\n        <div className='taskList-page'>\n            <div className='ToDoForm'>\n                <div className=\"toDoFormTitle\">\n                    <p>TASKS:</p>\n                </div>\n                <input\n                    value={newTask}\n                    type='text'\n                    onChange={handleChange}\n                    placeholder=\"add a task...\"\n                    onKeyPress={handleEnter}\n                    className='taskInput'\n                ></input>\n                <Button variant='tertiary' className = 'addTask' onClick={handleSubmit}>ADD</Button>\n            </div>\n            \n            <div className='tasks-container'>\n                \n                <ul className='checklist'>\n                    <p>TO DO:</p>\n                    {tasks.map((task,i)=> (\n                        <li\n                            key={i}\n                            id={i}\n                            className= {`todo ${task.ownedByCurrentUser ? \"my-task\" : \"other-task\"} ${statuses[i] ? \"strike\" : \"\"}`}\n                            onClick={handleClick}\n                \n                        >\n                            {task.body}\n                        </li>\n                        \n                    ))}\n                </ul>\n            </div>\n            <Button className='center' variant='primary' onClick={handleClear}>CLEAR</Button>     \n        </div>\n    );\n};\n\nexport default ToDoList;"]},"metadata":{},"sourceType":"module"}