{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\n\nconst useTimer = roomId => {\n  _s();\n\n  // initialize states + refs\n  // is the timer started?\n  const [start, setStart] = useState(false); // is the timer in work mode or rest mode?\n\n  const [work, setWork] = useState(true); // who is the current user interacting with client\n\n  const socketRef = useRef(); // is the alarm supposed to be going off?\n\n  const [alarmSound, setAlarmSound] = useState(false); // has initial info been received from teh server\n\n  const [infoReceived, setInfoReceived] = useState(false); // what was the timer at the last time someone pressed start/stop or work/rest?\n\n  const [countdown, setCountdown] = useState(1500000); // what was the time the last time someone pressed a button\n\n  const [clock, setClock] = useState(1614986917000); // what should the timer be displaying (in ms)\n\n  const [display, setDisplay] = useState(1500000);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); //receives info from server on connection if info has not been received yet\n\n    if (infoReceived === false) {\n      socketRef.current.on(POPULATE_TIMER, data => {\n        console.log('populat');\n        setStart(data.action);\n        setCountdown(data.countdown);\n        setDisplay(data.countdown);\n        setClock(data.clock);\n        setInfoReceived(true);\n        calculateTime(data.action, data.countdown, data.clock);\n        console.log('connection information received', data);\n      });\n    } // listens for info from database that is emitted when start/stop button is pushed, \n    // when work/rest button is pushed, or when timer counts down to zero\n\n\n    socketRef.current.on(INFORMATION_TO_CLIENT, data => {\n      setCountdown(data.countdown);\n      setClock(data.clock);\n      setStart(data.action);\n      calculateTime(data.countdown, data.clock);\n      console.log('information received', data);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      setWork(data.work);\n\n      if (data.work) {\n        setDisplay(300000);\n        setCountdown(300000);\n        setClock(data.clock);\n      } else {\n        setDisplay(1500000);\n        setCountdown(1500000);\n        setClock(data.clock);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]); // calculates timer time in ms based on server data\n\n  const calculateTime = (currentStart, currentCountdown, currentClock) => {\n    if (infoReceived === true) {\n      if (!currentStart) {\n        setDisplay(currentCountdown);\n      } else {\n        const difference = Date.now() - currentClock;\n        setDisplay(Math.max(0, currentCountdown - difference));\n        console.log('difference', difference);\n        console.log('currentDate', Date.now());\n      }\n    }\n  }; // checks if alarm should be sounding\n\n\n  const checkAlarm = () => {\n    if (infoReceived === true) {\n      if (display === 0 && !alarmSound) {\n        console.log('ALARM IS SOUNDING');\n        setAlarmSound(true);\n        const newWork = work;\n        sendWork(newWork);\n      } else if (alarmSound) {\n        setAlarmSound(false);\n      }\n    }\n  }; // calls calculateTime and checkAlarm every second\n\n\n  useEffect(() => {\n    if (start) {\n      const foobar = setInterval(() => {\n        console.log(countdown, clock, 'doing things');\n        calculateTime(start, countdown, clock);\n        checkAlarm();\n      }, 1000);\n      return function cleanup() {\n        clearInterval(foobar);\n      };\n    }\n  }); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    const newStart = !start;\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: newStart,\n      countdown: display,\n      clock: Date.now()\n    });\n    setStart(newStart);\n  }; // sends work status to server and alters display time when work/rest is clicked or timer hits 0\n\n\n  const sendWork = work => {\n    console.log('is it work?', work);\n    const newWork = !work;\n    console.log('is it work now?', newWork);\n    const newClock = Date.now();\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: newWork,\n      clock: newClock\n    });\n    setWork(newWork);\n\n    if (newWork) {\n      console.log('because it is work, set to 25');\n      setDisplay(1500000);\n      setCountdown(1500000);\n      setClock(newClock);\n    } else {\n      console.log('because it is not work, set to 5');\n      setDisplay(300000);\n      setCountdown(300000);\n      setClock(newClock);\n    }\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    display,\n    alarmSound,\n    infoReceived\n  };\n};\n\n_s(useTimer, \"AXHoIQdakTDH9fqt35p/Cd3oyvc=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","POPULATE_TIMER","useTimer","roomId","start","setStart","work","setWork","socketRef","alarmSound","setAlarmSound","infoReceived","setInfoReceived","countdown","setCountdown","clock","setClock","display","setDisplay","current","query","on","data","console","log","action","calculateTime","disconnect","currentStart","currentCountdown","currentClock","difference","Date","now","Math","max","checkAlarm","newWork","sendWork","foobar","setInterval","cleanup","clearInterval","sendStart","newStart","emit","newClock"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\n\nconst useTimer = (roomId) => {\n    \n    // initialize states + refs\n\n    // is the timer started?\n    const [start, setStart] = useState(false);\n    // is the timer in work mode or rest mode?\n    const [work, setWork] = useState(true);\n    // who is the current user interacting with client\n    const socketRef = useRef();\n    // is the alarm supposed to be going off?\n    const [alarmSound, setAlarmSound] = useState(false)\n    // has initial info been received from teh server\n    const [infoReceived, setInfoReceived] = useState(false)\n    // what was the timer at the last time someone pressed start/stop or work/rest?\n    const [countdown, setCountdown] = useState(1500000)\n    // what was the time the last time someone pressed a button\n    const [clock, setClock] = useState(1614986917000)\n    // what should the timer be displaying (in ms)\n    const [display, setDisplay] = useState(1500000)\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n\n        //receives info from server on connection if info has not been received yet\n        if (infoReceived === false) {\n            socketRef.current.on(POPULATE_TIMER, (data) => {\n                console.log('populat')\n                setStart(data.action)\n                setCountdown(data.countdown)\n                setDisplay(data.countdown)\n                setClock(data.clock)\n                setInfoReceived(true)\n                calculateTime(data.action, data.countdown, data.clock);\n                console.log('connection information received', data)\n            });\n        }\n\n        // listens for info from database that is emitted when start/stop button is pushed, \n        // when work/rest button is pushed, or when timer counts down to zero\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            setCountdown(data.countdown)\n            setClock(data.clock)\n            setStart(data.action)\n            calculateTime(data.countdown, data.clock);\n            console.log('information received', data)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            setWork(data.work)\n            if (data.work) {\n                setDisplay(300000);\n                setCountdown(300000);\n                setClock(data.clock);\n              } else {\n                setDisplay(1500000);\n                setCountdown(1500000);\n                setClock(data.clock);\n              }\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    // calculates timer time in ms based on server data\n    const calculateTime = (currentStart, currentCountdown, currentClock) => {\n        if (infoReceived === true) {\n            if (!currentStart) {\n                setDisplay(currentCountdown)\n            } else {\n                const difference = Date.now()-currentClock\n                setDisplay(Math.max(0,currentCountdown-difference))\n                console.log('difference',difference)\n                console.log('currentDate',Date.now())\n            }\n        }\n    } \n\n    // checks if alarm should be sounding\n    const checkAlarm = () => {\n        if (infoReceived === true) {\n            if (display === 0 && !alarmSound) {\n                console.log('ALARM IS SOUNDING')\n                setAlarmSound(true)\n                const newWork = work;\n                sendWork(newWork);\n            } else if (alarmSound) {\n                setAlarmSound(false)\n            }\n        }\n    }\n\n    // calls calculateTime and checkAlarm every second\n    useEffect(() => {\n\n       if (start) {\n        const foobar = setInterval(()=> {\n            console.log(countdown, clock, 'doing things')\n            calculateTime(start, countdown, clock);\n            checkAlarm();\n        }, 1000 )\n        return function cleanup() {\n            clearInterval(foobar)\n        }\n       }\n    \n    });\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        const newStart = !start;\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: newStart,\n            countdown: display,\n            clock: Date.now()\n        });\n        setStart(newStart);\n    }\n\n    // sends work status to server and alters display time when work/rest is clicked or timer hits 0\n    const sendWork = (work) => {\n        console.log('is it work?', work)\n        const newWork = !work;\n        console.log('is it work now?', newWork);\n        const newClock = Date.now();\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: newWork,\n            clock: newClock\n        })\n        setWork(newWork);\n        if (newWork) {\n            console.log('because it is work, set to 25')\n            setDisplay(1500000);\n            setCountdown(1500000);\n            setClock(newClock);\n          } else {\n            console.log('because it is not work, set to 5')\n            setDisplay(300000);\n            setCountdown(300000);\n            setClock(newClock);\n          }\n    }\n\n    return {start, sendStart, work, sendWork, display, alarmSound, infoReceived}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}