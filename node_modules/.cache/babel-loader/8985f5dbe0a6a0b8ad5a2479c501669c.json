{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = roomId => {\n  _s();\n\n  const socketRef = useRef();\n  var tempMinutes = 0;\n  var tempSeconds = 0;\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // populates timer on refresh\n\n    socketRef.current.on('setTimer', data => {\n      console.log('timer', data);\n      tempMinutes = data.minutes;\n      tempSeconds = data.seconds;\n    });\n  }, [roomId]);\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(tempMinutes);\n  const [seconds, setSeconds] = useState(tempSeconds);\n  const [users, setUsers] = useState([]);\n  const [alarmSound, setAlarmSound] = useState(false);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on('users', data => {\n      setUsers(data);\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, start, minutes, start, work]);\n  useEffect(() => {// socketRef.current.on('setStatuses', (data) => {\n    //     console.log('statuses',data)\n    //     setStart(data.start)\n    //     setWork(data.work)\n    // })\n  }, [roomId, users]); //function for decrementing timer\n\n  const decrement = () => {\n    if (start === true) {\n      const intervalId = setInterval(() => {\n        setSeconds(prev => prev - 1);\n      }, 1000);\n      setAlarmSound(false);\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }; //calls decrement every time start changes\n\n\n  useEffect(decrement, [start]); //function for adjusting display time\n\n  const time = () => {\n    if (start === true) {\n      if (seconds === -1 && minutes !== 0) {\n        setSeconds(59);\n        setMinutes(prev => prev - 1);\n      } else if (minutes === 0 && seconds === -1 && work === true) {\n        setMinutes(5);\n        setSeconds(0);\n        setWork(false);\n        setAlarmSound(true);\n      } else if (minutes === 0 && seconds === -1 && work === false) {\n        setMinutes(25);\n        setSeconds(0);\n        setWork(true);\n        setAlarmSound(true);\n      }\n    }\n\n    socketRef.current.emit('time', {\n      minutes: minutes,\n      seconds: seconds\n    });\n  }; //calls time on every re-render\n\n\n  useEffect(time, [seconds]); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    alarmSound\n  };\n};\n\n_s(useTimer, \"FZGnRt7KFtuJkR7QnPZkqlH7a5w=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","useTimer","roomId","socketRef","tempMinutes","tempSeconds","current","query","on","data","console","log","minutes","seconds","start","setStart","work","setWork","setMinutes","setSeconds","users","setUsers","alarmSound","setAlarmSound","disconnect","decrement","intervalId","setInterval","prev","clearInterval","time","emit","sendStart","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = (roomId) => {\n    const socketRef = useRef();\n    var tempMinutes = 0;\n    var tempSeconds = 0\n    useEffect(() => {\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n\n        // populates timer on refresh\n        socketRef.current.on('setTimer', (data) => {\n            console.log('timer',data)\n            tempMinutes = data.minutes\n            tempSeconds = data.seconds\n        })\n    },[roomId])\n\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(tempMinutes);\n    const [seconds, setSeconds] = useState(tempSeconds);\n    const [users, setUsers] = useState([])\n    \n    const [alarmSound, setAlarmSound] = useState(false)\n\n\n    useEffect(()=> {\n\n\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n\n        socketRef.current.on('users', (data) => {\n            setUsers(data)\n        })\n\n        \n        \n\n\n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n        })\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,start,minutes,start,work]);\n\n    useEffect(()=> {\n        \n        // socketRef.current.on('setStatuses', (data) => {\n        //     console.log('statuses',data)\n        //     setStart(data.start)\n        //     setWork(data.work)\n        // })\n    },[roomId,users]);\n\n\n     //function for decrementing timer\n    const decrement = () => {\n    if (start === true) {\n    const intervalId = setInterval(() => {\n        setSeconds((prev) => prev - 1);\n    }, 1000);\n    \n    setAlarmSound(false)\n    return () => {\n        clearInterval(intervalId);\n    };\n    }\n\n    }\n\n    //calls decrement every time start changes\n    useEffect(decrement, [start]);\n\n\n\n    //function for adjusting display time\n    const time = () => {\n        if (start === true){\n          if (seconds === -1 && minutes !== 0) {\n            setSeconds(59);\n            setMinutes((prev) => prev - 1);\n          } else if (minutes === 0 && seconds === -1 && work === true) {\n            setMinutes(5);\n            setSeconds(0);\n            setWork(false);\n            setAlarmSound(true)\n          } else if (minutes === 0 && seconds === -1 && work === false) {\n            setMinutes(25);\n            setSeconds(0);\n            setWork(true);\n            setAlarmSound(true)\n          }\n        }\n        socketRef.current.emit('time', {\n            minutes: minutes,\n            seconds: seconds,\n        });\n    }\n\n    //calls time on every re-render\n    useEffect(time, [seconds]);\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n\n    return {start, sendStart, work, sendWork, minutes, seconds, alarmSound}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}