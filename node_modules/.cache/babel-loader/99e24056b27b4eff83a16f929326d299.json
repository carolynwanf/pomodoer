{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(10);\n  const socketRef = useRef();\n  const audio = new Audio(\"./alarm_chime.mp3\");\n  audio.play();\n  console.log(audio); //function for decrementing timer\n\n  const decrement = () => {\n    if (start === true) {\n      const intervalId = setInterval(() => {\n        setSeconds(prev => prev - 1);\n      }, 1000);\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }; //calls decrement every time start changes\n\n\n  useEffect(decrement, [start]);\n\n  const playAudio = () => {\n    audio.play();\n  }; //function for adjusting display time\n\n\n  const time = () => {\n    if (start === true) {\n      if (seconds === -1 && minutes !== 0) {\n        setSeconds(59);\n        setMinutes(prev => prev - 1);\n      } else if (minutes === 0 && seconds === -1 && work === true) {\n        setMinutes(5);\n        setSeconds(0);\n        setWork(false);\n        playAudio();\n      } else if (minutes === 0 && seconds === -1 && work === false) {\n        setMinutes(25);\n        setSeconds(0);\n        setWork(true);\n        playAudio();\n      }\n    }\n  }; //calls time on every re-render\n\n\n  useEffect(time, [seconds]);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, start]); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds\n  };\n};\n\n_s(useTimer, \"u/dC4g9mT7hymtDcej3IiTlzZUE=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","audio","Audio","play","console","log","decrement","intervalId","setInterval","prev","clearInterval","playAudio","time","current","query","on","data","disconnect","sendStart","emit","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(0);\n    const [seconds, setSeconds] = useState(10);\n    const socketRef = useRef();\n    const audio = new Audio(\"./alarm_chime.mp3\")\n\n    audio.play()\n\n    console.log(audio)\n\n    //function for decrementing timer\n    const decrement = () => {\n        if (start === true) {\n        const intervalId = setInterval(() => {\n            setSeconds((prev) => prev - 1);\n        }, 1000);\n        return () => {\n            clearInterval(intervalId);\n        };\n        }\n    }\n\n    //calls decrement every time start changes\n    useEffect(decrement, [start]);\n\n    const playAudio = () => {\n        audio.play()\n    }\n\n    //function for adjusting display time\n    const time = () => {\n        if (start === true){\n          if (seconds === -1 && minutes !== 0) {\n            setSeconds(59);\n            setMinutes((prev) => prev - 1);\n          } else if (minutes === 0 && seconds === -1 && work === true) {\n            setMinutes(5);\n            setSeconds(0);\n            setWork(false);\n            playAudio()\n          } else if (minutes === 0 && seconds === -1 && work === false) {\n            setMinutes(25);\n            setSeconds(0);\n            setWork(true);\n            playAudio()\n          }\n        }\n    }\n\n    //calls time on every re-render\n    useEffect(time, [seconds]);\n\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n        })\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,start]);\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n\n    return {start, sendStart, work, sendWork, minutes, seconds}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}