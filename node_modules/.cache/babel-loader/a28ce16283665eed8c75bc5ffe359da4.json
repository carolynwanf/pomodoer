{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer'; // var clientData = {\n//     start: false,\n//     work: true,\n//     minutes: 25,\n//     seconds: 0,\n//     alarmSound: false,\n//     infoReceived: false,\n//     action: false,\n//     countdown: 0,\n//     clock: 0,\n//     display: 0,\n// }\n// var start = clientData.start\n// var work = clientData.work\n// var minutes = clientData.minutes\n// var seconds = clientData.seconds\n// var alarmSound = clientData.alarmSound\n// var infoReceived = clientData.infoReceived\n// var action = clientData.action\n// var countdown = clientData.countdown\n// var clock = clientData.clock\n// var display = display \n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const socketRef = useRef();\n  const [alarmSound, setAlarmSound] = useState(false); // const [infoReceived, setInfoReceived] = useState(false);\n  //initialize these after info pulled from server?\n\n  const action = useRef(false);\n  const countdown = useRef(1500000);\n  const clock = useRef(Date.now());\n  const display = useRef(1500000);\n  const infoReceived = useRef(false);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n      console.log('start/stop received');\n    }); //listens for information on connection\n\n    if (infoReceived === false) {\n      socketRef.current.on(POPULATE_TIMER, data => {\n        action.current = data.action;\n        countdown.current = data.countdown;\n        display.current = data.countdown;\n        clock.current = data.clock;\n        setStart(data.action);\n        console.log('connection information received', data);\n        console.log('set with data', action.current, countdown.current, display.current, clock.current); // setInfoReceived(true)\n\n        infoReceived.current = true;\n        console.log('setInfoReceived', infoReceived);\n      });\n    } //listens for information\n\n\n    socketRef.current.on(INFORMATION_TO_CLIENT, data => {\n      action.current = data.action;\n      countdown.current = data.countdown;\n      clock.current = data.clock;\n      setStart(data.action);\n      console.log('information received', data);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]); //calculates display time in ms based on server data\n\n  const calculateTime = () => {\n    if (action.current === false) {\n      display.current = countdown.current;\n      console.log('setting display', display.current, countdown.current);\n    } else {\n      const difference = Date.now() - clock.current;\n      display.current = Math.max(0, countdown.current - difference);\n      console.log('difference', difference);\n      console.log('currentDate', Date.now());\n    }\n\n    console.log('inside caluclateTime', display.current);\n  };\n\n  const convert = () => {\n    setMinutes(Math.floor(display.current / 1000 / 60));\n    console.log('between setting minutes and seconds', display.current);\n    setSeconds(Math.floor(display.current / 1000 % 60));\n    console.log('inside conversion', display.current, minutes, seconds);\n\n    if (minutes === seconds === 0) {\n      setAlarmSound(true);\n      setWork(!work);\n      socketRef.current.emit(TIMER_WORK_REST, {\n        work: work\n      });\n      console.log('inside conditional in conversion');\n    } else {\n      setAlarmSound(false);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      calculateTime();\n      convert();\n    }, 0);\n  }); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start,\n      countdown: display.current\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    alarmSound,\n    infoReceived\n  };\n};\n\n_s(useTimer, \"HHTfmqY+S8iuiMbq+B+3EeEgirg=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","POPULATE_TIMER","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","alarmSound","setAlarmSound","action","countdown","clock","Date","now","display","infoReceived","current","query","on","data","console","log","disconnect","calculateTime","difference","Math","max","convert","floor","emit","setTimeout","sendStart","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\n\n// var clientData = {\n//     start: false,\n//     work: true,\n//     minutes: 25,\n//     seconds: 0,\n//     alarmSound: false,\n//     infoReceived: false,\n//     action: false,\n//     countdown: 0,\n//     clock: 0,\n//     display: 0,\n// }\n\n// var start = clientData.start\n// var work = clientData.work\n// var minutes = clientData.minutes\n// var seconds = clientData.seconds\n// var alarmSound = clientData.alarmSound\n// var infoReceived = clientData.infoReceived\n// var action = clientData.action\n// var countdown = clientData.countdown\n// var clock = clientData.clock\n// var display = display \n\n\n\nconst useTimer = (roomId) => {\n    \n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n    const [alarmSound, setAlarmSound] = useState(false);\n    // const [infoReceived, setInfoReceived] = useState(false);\n\n    //initialize these after info pulled from server?\n\n    const action = useRef(false)\n    const countdown = useRef(1500000)\n    const clock = useRef(Date.now())\n    const display = useRef(1500000)\n    const infoReceived = useRef(false)\n\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n            console.log('start/stop received')\n        });\n\n        //listens for information on connection\n        if (infoReceived === false) {\n            socketRef.current.on(POPULATE_TIMER, (data) => {\n                action.current = data.action\n                countdown.current = data.countdown\n                display.current = data.countdown\n                clock.current = data.clock\n                setStart(data.action)\n                console.log('connection information received', data)\n                console.log('set with data', action.current,countdown.current,display.current,clock.current)\n                // setInfoReceived(true)\n                infoReceived.current = true\n                console.log('setInfoReceived', infoReceived)\n            });\n        }\n\n        //listens for information\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            action.current = data.action\n            countdown.current = data.countdown\n            clock.current = data.clock\n            setStart(data.action)\n            console.log('information received', data)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    //calculates display time in ms based on server data\n    const calculateTime = () => {\n        if (action.current === false) {\n            display.current = countdown.current\n            console.log('setting display',display.current,countdown.current)\n        } else {\n            const difference = Date.now()-clock.current\n            display.current = Math.max(0,countdown.current-difference)\n            console.log('difference',difference)\n            console.log('currentDate',Date.now())\n        }\n        console.log('inside caluclateTime',display.current)\n    } \n\n    const convert = () => {\n        setMinutes(Math.floor(display.current/1000/60))\n        console.log('between setting minutes and seconds', display.current)\n        setSeconds(Math.floor ((display.current/1000) % 60))\n        console.log('inside conversion', display.current, minutes, seconds)\n        if (minutes === seconds === 0) {\n            setAlarmSound(true)\n            setWork(!work)\n            socketRef.current.emit(TIMER_WORK_REST, {\n                work:work\n            })\n            console.log('inside conditional in conversion' )\n        } else {\n            setAlarmSound(false)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            calculateTime();\n            convert();\n        }, 0);\n    })\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start,\n            countdown: display.current,\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n    return {start, sendStart, work, sendWork, minutes, seconds, alarmSound, infoReceived}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}