{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\nvar clientData = {\n  start: false,\n  work: true,\n  minutes: 25,\n  seconds: 0,\n  alarmSound: false,\n  infoReceived: false,\n  action: false,\n  countdown: 0,\n  clock: 0,\n  display: 0\n};\nvar start = clientData.start;\nvar work = clientData.work;\nvar minutes = clientData.minutes;\nvar seconds = clientData.seconds;\nvar alarmSound = clientData.alarmSound;\nvar infoReceived = clientData.infoReceived;\nvar action = clientData.action;\nvar countdown = clientData.countdown;\nvar clock = clientData.clock;\nvar display = display;\n\nconst useTimer = roomId => {\n  _s();\n\n  // const [start, setStart] = useState(false);\n  // const [work, setWork] = useState(true);\n  // const [minutes, setMinutes] = useState(25);\n  // const [seconds, setSeconds] = useState(0);\n  const socketRef = useRef(); // const [alarmSound, setAlarmSound] = useState(false)\n  // const [infoReceived, setInfoReceived] = useState(false)\n  //initialize these after info pulled from server?\n  // const [action,setAction] = useState(false)\n  // const [countdown, setCountdown] = useState(1500000)\n  // const [clock, setClock] = useState(1614986917000)\n  // const [display, setDisplay] = useState(1500000)\n\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n      console.log('start/stop received');\n    }); //listens for information on connection\n\n    if (infoReceived === false) {\n      socketRef.current.on(POPULATE_TIMER, data => {\n        action = data.action;\n        setCountdown(data.countdown);\n        setDisplay(data.countdown);\n        setClock(data.clock);\n        setStart(data.action);\n        console.log('connection information received', data);\n        console.log('set with data', action, countdown, display, clock);\n        setInfoReceived(true);\n        console.log('setInfoReceived', infoReceived);\n      });\n    } //listens for information\n\n\n    socketRef.current.on(INFORMATION_TO_CLIENT, data => {\n      setAction(data.action);\n      setCountdown(data.countdown);\n      setClock(data.clock);\n      setStart(data.action);\n      console.log('information received', data);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]); //calculates display time in ms based on server data\n\n  const calculateTime = () => {\n    if (action === false) {\n      setDisplay(countdown);\n      console.log('setting display', display, countdown);\n    } else {\n      const difference = Date.now() - clock;\n      setDisplay(Math.max(0, countdown - difference));\n      console.log('difference', difference);\n      console.log('currentDate', Date.now());\n    }\n\n    console.log('inside caluclateTime', display);\n  };\n\n  const convert = () => {\n    setMinutes(Math.floor(display / 1000 / 60));\n    console.log('between setting minutes and seconds', display);\n    setSeconds(Math.floor(display / 1000 % 60));\n    console.log('inside conversion', display, minutes, seconds);\n\n    if (minutes === seconds === 0) {\n      setAlarmSound(true);\n      setWork(!work);\n      socketRef.current.emit(TIMER_WORK_REST, {\n        work: work\n      });\n      console.log('inside conditional in conversion');\n    } else {\n      setAlarmSound(false);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      calculateTime();\n      convert();\n    }, 0);\n  }); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start,\n      countdown: display\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    alarmSound,\n    infoReceived\n  };\n};\n\n_s(useTimer, \"sOoGPfr2IEyc8S7bWkmAqPt/gWk=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","POPULATE_TIMER","clientData","start","work","minutes","seconds","alarmSound","infoReceived","action","countdown","clock","display","useTimer","roomId","socketRef","current","query","on","data","setStart","console","log","setCountdown","setDisplay","setClock","setInfoReceived","setAction","setWork","setMinutes","setSeconds","disconnect","calculateTime","difference","Date","now","Math","max","convert","floor","setAlarmSound","emit","setTimeout","sendStart","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\n\nvar clientData = {\n    start: false,\n    work: true,\n    minutes: 25,\n    seconds: 0,\n    alarmSound: false,\n    infoReceived: false,\n    action: false,\n    countdown: 0,\n    clock: 0,\n    display: 0,\n}\n\nvar start = clientData.start\nvar work = clientData.work\nvar minutes = clientData.minutes\nvar seconds = clientData.seconds\nvar alarmSound = clientData.alarmSound\nvar infoReceived = clientData.infoReceived\nvar action = clientData.action\nvar countdown = clientData.countdown\nvar clock = clientData.clock\nvar display = display \n\nconst useTimer = (roomId) => {\n    \n    // const [start, setStart] = useState(false);\n    // const [work, setWork] = useState(true);\n    // const [minutes, setMinutes] = useState(25);\n    // const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n    // const [alarmSound, setAlarmSound] = useState(false)\n    // const [infoReceived, setInfoReceived] = useState(false)\n\n    //initialize these after info pulled from server?\n\n    // const [action,setAction] = useState(false)\n    // const [countdown, setCountdown] = useState(1500000)\n    // const [clock, setClock] = useState(1614986917000)\n    // const [display, setDisplay] = useState(1500000)\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n            console.log('start/stop received')\n        });\n\n        //listens for information on connection\n        if (infoReceived === false) {\n            socketRef.current.on(POPULATE_TIMER, (data) => {\n                action = data.action\n                setCountdown(data.countdown)\n                setDisplay(data.countdown)\n                setClock(data.clock)\n                setStart(data.action)\n                console.log('connection information received', data)\n                console.log('set with data', action,countdown,display,clock)\n                setInfoReceived(true)\n                console.log('setInfoReceived', infoReceived)\n            });\n        }\n\n        //listens for information\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            setAction(data.action)\n            setCountdown(data.countdown)\n            setClock(data.clock)\n            setStart(data.action)\n            console.log('information received', data)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    //calculates display time in ms based on server data\n    const calculateTime = () => {\n        if (action === false) {\n            setDisplay(countdown)\n            console.log('setting display',display,countdown)\n        } else {\n            const difference = Date.now()-clock\n            setDisplay(Math.max(0,countdown-difference))\n            console.log('difference',difference)\n            console.log('currentDate',Date.now())\n        }\n        console.log('inside caluclateTime',display)\n    } \n\n    const convert = () => {\n        setMinutes(Math.floor(display/1000/60))\n        console.log('between setting minutes and seconds', display)\n        setSeconds(Math.floor ((display/1000) % 60))\n        console.log('inside conversion', display, minutes, seconds)\n        if (minutes === seconds === 0) {\n            setAlarmSound(true)\n            setWork(!work)\n            socketRef.current.emit(TIMER_WORK_REST, {\n                work:work\n            })\n            console.log('inside conditional in conversion' )\n        } else {\n            setAlarmSound(false)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            calculateTime();\n            convert();\n        }, 0);\n    })\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start,\n            countdown: display,\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n    return {start, sendStart, work, sendWork, minutes, seconds, alarmSound, infoReceived}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}