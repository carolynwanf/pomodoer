{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer'; // var clientData = {\n//     start: false,\n//     work: true,\n//     minutes: 25,\n//     seconds: 0,\n//     alarmSound: false,\n//     infoReceived: false,\n//     action: false,\n//     countdown: 0,\n//     clock: 0,\n//     display: 0,\n// }\n// var start = clientData.start\n// var work = clientData.work\n// var minutes = clientData.minutes\n// var seconds = clientData.seconds\n// var alarmSound = clientData.alarmSound\n// var infoReceived = clientData.infoReceived\n// var action = clientData.action\n// var countdown = clientData.countdown\n// var clock = clientData.clock\n// var display = display \n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const socketRef = useRef();\n  const [alarmSound, setAlarmSound] = useState(false);\n  const [infoReceived, setInfoReceived] = useState(false); //initialize these after info pulled from server?\n\n  const [countdown, setCountdown] = useState(1500000);\n  const [clock, setClock] = useState(1614986917000);\n  const [display, setDisplay] = useState(1500000);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); //listens for information on connection\n\n    if (infoReceived === false) {\n      socketRef.current.on(POPULATE_TIMER, data => {\n        setCountdown(data.countdown);\n        setDisplay(data.countdown);\n        setClock(data.clock);\n        setStart(data.action);\n        console.log('connection information received', data);\n        console.log('set with data', countdown, display, clock);\n        setInfoReceived(true);\n        calculateTime(data.countdown, data.clock); //convert();\n\n        console.log('setInfoReceived', infoReceived);\n      });\n    } //listens for information\n\n\n    socketRef.current.on(INFORMATION_TO_CLIENT, data => {\n      setCountdown(data.countdown);\n      setClock(data.clock);\n      setStart(data.action);\n      calculateTime(data.countdown, data.clock);\n      console.log('information received', data);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      setWork(data.work);\n\n      if (data.work) {\n        setDisplay(300000);\n        setCountdown(300000);\n        setClock(data.clock);\n      } else {\n        setDisplay(1500000);\n        setCountdown(1500000);\n        setClock(data.clock);\n      }\n\n      convert();\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]); //calculates display time in ms based on server data\n\n  const calculateTime = (currentCountdown, currentClock) => {\n    if (infoReceived === true) {\n      if (start === false) {\n        setDisplay(currentCountdown);\n      } else {\n        const difference = Date.now() - currentClock;\n        setDisplay(Math.max(0, currentCountdown - difference));\n        console.log('difference', difference);\n        console.log('currentDate', Date.now());\n      }\n    }\n  };\n\n  const convert = () => {\n    if (infoReceived === true) {\n      if (display === 0 && !alarmSound) {\n        console.log('ALARM IS SOUNDING');\n        setAlarmSound(true);\n        const newWork = !work;\n        sendWork(newWork);\n      } else if (alarmSound) {\n        setAlarmSound(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      calculateTime(countdown, clock);\n      convert();\n    }, 500);\n  }); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    const newStart = !start;\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: newStart,\n      countdown: display,\n      clock: Date.now()\n    });\n    setStart(newStart);\n    convert();\n  };\n\n  const sendWork = work => {\n    console.log('is it work?', work);\n    const newWork = !work;\n    console.log('is it work now?', newWork);\n    const newClock = Date.now();\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: newWork,\n      clock: newClock\n    });\n    setWork(newWork);\n\n    if (newWork) {\n      console.log('because it is work, set to 25');\n      setDisplay(1500000);\n      setCountdown(1500000);\n      setClock(newClock);\n    } else {\n      console.log('because it is not work, set to 5');\n      setDisplay(300000);\n      setCountdown(300000);\n      setClock(newClock);\n    }\n\n    convert();\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    display,\n    alarmSound,\n    infoReceived\n  };\n};\n\n_s(useTimer, \"yF/9bqoxH8UC2J5LOzvVbu8ffUU=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","POPULATE_TIMER","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","alarmSound","setAlarmSound","infoReceived","setInfoReceived","countdown","setCountdown","clock","setClock","display","setDisplay","current","query","on","data","action","console","log","calculateTime","convert","disconnect","currentCountdown","currentClock","difference","Date","now","Math","max","newWork","sendWork","setTimeout","sendStart","newStart","emit","newClock"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\n\n// var clientData = {\n//     start: false,\n//     work: true,\n//     minutes: 25,\n//     seconds: 0,\n//     alarmSound: false,\n//     infoReceived: false,\n//     action: false,\n//     countdown: 0,\n//     clock: 0,\n//     display: 0,\n// }\n\n// var start = clientData.start\n// var work = clientData.work\n// var minutes = clientData.minutes\n// var seconds = clientData.seconds\n// var alarmSound = clientData.alarmSound\n// var infoReceived = clientData.infoReceived\n// var action = clientData.action\n// var countdown = clientData.countdown\n// var clock = clientData.clock\n// var display = display \n\nconst useTimer = (roomId) => {\n    \n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n    const [alarmSound, setAlarmSound] = useState(false)\n    const [infoReceived, setInfoReceived] = useState(false)\n\n    //initialize these after info pulled from server?\n\n    const [countdown, setCountdown] = useState(1500000)\n    const [clock, setClock] = useState(1614986917000)\n    const [display, setDisplay] = useState(1500000)\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n\n        //listens for information on connection\n        if (infoReceived === false) {\n            socketRef.current.on(POPULATE_TIMER, (data) => {\n                setCountdown(data.countdown)\n                setDisplay(data.countdown)\n                setClock(data.clock)\n                setStart(data.action)\n                console.log('connection information received', data)\n                console.log('set with data',countdown,display,clock)\n                setInfoReceived(true)\n                calculateTime(data.countdown, data.clock);\n                //convert();\n                console.log('setInfoReceived', infoReceived)\n            });\n        }\n\n        //listens for information\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            setCountdown(data.countdown)\n            setClock(data.clock)\n            setStart(data.action)\n            calculateTime(data.countdown, data.clock);\n            console.log('information received', data)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            setWork(data.work)\n            if (data.work) {\n                setDisplay(300000);\n                setCountdown(300000);\n                setClock(data.clock);\n              } else {\n                setDisplay(1500000);\n                setCountdown(1500000);\n                setClock(data.clock);\n              }\n              convert();\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    //calculates display time in ms based on server data\n    const calculateTime = (currentCountdown, currentClock) => {\n        if (infoReceived === true) {\n            if (start === false) {\n                setDisplay(currentCountdown)\n            } else {\n                const difference = Date.now()-currentClock\n                setDisplay(Math.max(0,currentCountdown-difference))\n                console.log('difference',difference)\n                console.log('currentDate',Date.now())\n            }\n        }\n    } \n\n    const convert = () => {\n        if (infoReceived === true) {\n            if (display === 0 && !alarmSound) {\n                console.log('ALARM IS SOUNDING')\n                setAlarmSound(true)\n                const newWork = !work;\n                sendWork(newWork);\n            } else if (alarmSound) {\n                setAlarmSound(false)\n            }\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            calculateTime(countdown, clock);\n            convert();\n        }, 500);\n    })\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        const newStart = !start;\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: newStart,\n            countdown: display,\n            clock: Date.now()\n        });\n        setStart(newStart);\n        convert();\n    }\n\n    const sendWork = (work) => {\n        console.log('is it work?', work)\n        const newWork = !work;\n        console.log('is it work now?', newWork);\n        const newClock = Date.now();\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: newWork,\n            clock: newClock\n        })\n        setWork(newWork);\n        if (newWork) {\n            console.log('because it is work, set to 25')\n            setDisplay(1500000);\n            setCountdown(1500000);\n            setClock(newClock);\n          } else {\n            console.log('because it is not work, set to 5')\n            setDisplay(300000);\n            setCountdown(300000);\n            setClock(newClock);\n          }\n          convert();\n    }\n\n    return {start, sendStart, work, sendWork, display, alarmSound, infoReceived}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}