{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const socketRef = useRef();\n  const [alarmSound, setAlarmSound] = useState(false);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // populates timer on refresh\n\n    socketRef.current.on('setTimer', data => {\n      console.log('timer', data);\n      setMinutes(data.minutes);\n      setSeconds(data.seconds);\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, start, minutes, start, work]); //function for decrementing timer\n\n  const decrement = () => {\n    if (start === true) {\n      const intervalId = setInterval(() => {\n        setSeconds(prev => prev - 1);\n      }, 1000);\n      setAlarmSound(false);\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  };\n\n  useEffect(() => {\n    socketRef.current.on('setStatuses', data => {\n      console.log('statuses', data);\n      setStart(data.start);\n      setWork(data.work);\n    });\n  }, [roomId, socketRef.current]); //calls decrement every time start changes\n\n  useEffect(decrement, [start]); //function for adjusting display time\n\n  const time = () => {\n    if (start === true) {\n      if (seconds === -1 && minutes !== 0) {\n        setSeconds(59);\n        setMinutes(prev => prev - 1);\n      } else if (minutes === 0 && seconds === -1 && work === true) {\n        setMinutes(5);\n        setSeconds(0);\n        setWork(false);\n        setAlarmSound(true);\n      } else if (minutes === 0 && seconds === -1 && work === false) {\n        setMinutes(25);\n        setSeconds(0);\n        setWork(true);\n        setAlarmSound(true);\n      }\n    }\n\n    socketRef.current.emit('time', {\n      minutes: minutes,\n      seconds: seconds\n    });\n  }; //calls time on every re-render\n\n\n  useEffect(time, [seconds]); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    alarmSound\n  };\n};\n\n_s(useTimer, \"rOs/B9CvH5rLegsMXSc8JbnGKyU=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","alarmSound","setAlarmSound","current","query","on","data","console","log","disconnect","decrement","intervalId","setInterval","prev","clearInterval","time","emit","sendStart","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n    const [alarmSound, setAlarmSound] = useState(false)\n\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n\n        \n        // populates timer on refresh\n        socketRef.current.on('setTimer', (data) => {\n            console.log('timer',data)\n            setMinutes(data.minutes)\n            setSeconds(data.seconds)\n        })\n\n        \n\n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n        })\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,start,minutes,start,work]);\n\n     //function for decrementing timer\n     const decrement = () => {\n        if (start === true) {\n        const intervalId = setInterval(() => {\n            setSeconds((prev) => prev - 1);\n        }, 1000);\n        \n        setAlarmSound(false)\n        return () => {\n            clearInterval(intervalId);\n        };\n        }\n\n        \n    }\n\n    useEffect(()=> {\n        socketRef.current.on('setStatuses', (data) => {\n            console.log('statuses',data)\n            setStart(data.start)\n            setWork(data.work)\n        })\n    },[roomId,socketRef.current])\n\n    //calls decrement every time start changes\n    useEffect(decrement, [start]);\n\n\n\n    //function for adjusting display time\n    const time = () => {\n        if (start === true){\n          if (seconds === -1 && minutes !== 0) {\n            setSeconds(59);\n            setMinutes((prev) => prev - 1);\n          } else if (minutes === 0 && seconds === -1 && work === true) {\n            setMinutes(5);\n            setSeconds(0);\n            setWork(false);\n            setAlarmSound(true)\n          } else if (minutes === 0 && seconds === -1 && work === false) {\n            setMinutes(25);\n            setSeconds(0);\n            setWork(true);\n            setAlarmSound(true)\n          }\n        }\n        socketRef.current.emit('time', {\n            minutes: minutes,\n            seconds: seconds,\n        });\n    }\n\n    //calls time on every re-render\n    useEffect(time, [seconds]);\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n\n    return {start, sendStart, work, sendWork, minutes, seconds, alarmSound}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}