{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\nvar clientData = {\n  start: false,\n  work: true,\n  minutes: 25,\n  seconds: 0,\n  alarmSound: false,\n  infoReceived: false,\n  action: false,\n  countdown: 0,\n  clock: 0,\n  display: 0\n}; // var start = clientData.start\n// var work = clientData.work\n// var minutes = clientData.minutes\n// var seconds = clientData.seconds\n// var alarmSound = clientData.alarmSound\n// var infoReceived = clientData.infoReceived\n// var action = clientData.action\n// var countdown = clientData.countdown\n// var clock = clientData.clock\n// var display = display \n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const socketRef = useRef();\n  const [alarmSound, setAlarmSound] = useState(false);\n  const [infoReceived, setInfoReceived] = useState(false); //initialize these after info pulled from server?\n\n  const action = useRef(false);\n  const countdown = useRef(1500000);\n  const clock = useRef(1614986917000);\n  const display = useRef(1500000);\n  console.log('set stuff with useRef', action.current, countdown.current, display.current, clock.current);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n      console.log('start/stop received');\n    }); //listens for information on connection\n\n    if (infoReceived === false) {\n      socketRef.current.on(POPULATE_TIMER, data => {\n        action.current = data.action;\n        countdown.current = data.countdown;\n        display.current = data.countdown;\n        clock.current = data.clock;\n        setStart(data.action);\n        console.log('connection information received', data);\n        console.log('set with data', action.current, countdown.current, display.current, clock.current);\n        setInfoReceived(true);\n        console.log('setInfoReceived', infoReceived);\n      });\n    } //listens for information\n\n\n    socketRef.current.on(INFORMATION_TO_CLIENT, data => {\n      action.current = data.action;\n      countdown.current = data.countdown;\n      clock.current = data.clock;\n      setStart(data.action);\n      console.log('information received', data);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]); //calculates display time in ms based on server data\n\n  const calculateTime = () => {\n    if (action === false) {\n      display.current = countdown.current;\n      console.log('setting display', display, countdown);\n    } else {\n      const difference = Date.now() - clock.current;\n      display.current = Math.max(0, countdown - difference);\n      console.log('difference', difference);\n      console.log('currentDate', Date.now());\n    }\n\n    console.log('inside caluclateTime', display);\n  };\n\n  const convert = () => {\n    setMinutes(Math.floor(display / 1000 / 60));\n    console.log('between setting minutes and seconds', display);\n    setSeconds(Math.floor(display / 1000 % 60));\n    console.log('inside conversion', display, minutes, seconds);\n\n    if (minutes === seconds === 0) {\n      setAlarmSound(true);\n      setWork(!work);\n      socketRef.current.emit(TIMER_WORK_REST, {\n        work: work\n      });\n      console.log('inside conditional in conversion');\n    } else {\n      setAlarmSound(false);\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      calculateTime();\n      convert();\n    }, 0);\n  }); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start,\n      countdown: display\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    alarmSound,\n    infoReceived\n  };\n};\n\n_s(useTimer, \"SLp4HrRASv49f/T4YHvnOWqVhVE=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","POPULATE_TIMER","clientData","start","work","minutes","seconds","alarmSound","infoReceived","action","countdown","clock","display","useTimer","roomId","setStart","setWork","setMinutes","setSeconds","socketRef","setAlarmSound","setInfoReceived","console","log","current","query","on","data","disconnect","calculateTime","difference","Date","now","Math","max","convert","floor","emit","setTimeout","sendStart","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\n\nvar clientData = {\n    start: false,\n    work: true,\n    minutes: 25,\n    seconds: 0,\n    alarmSound: false,\n    infoReceived: false,\n    action: false,\n    countdown: 0,\n    clock: 0,\n    display: 0,\n}\n\n// var start = clientData.start\n// var work = clientData.work\n// var minutes = clientData.minutes\n// var seconds = clientData.seconds\n// var alarmSound = clientData.alarmSound\n// var infoReceived = clientData.infoReceived\n// var action = clientData.action\n// var countdown = clientData.countdown\n// var clock = clientData.clock\n// var display = display \n\n\n\nconst useTimer = (roomId) => {\n    \n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n    const [alarmSound, setAlarmSound] = useState(false);\n    const [infoReceived, setInfoReceived] = useState(false);\n\n    //initialize these after info pulled from server?\n\n    const action = useRef(false)\n    const countdown = useRef(1500000)\n    const clock = useRef(1614986917000)\n    const display = useRef(1500000)\n\n    console.log('set stuff with useRef', action.current,countdown.current,display.current,clock.current)\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n            console.log('start/stop received')\n        });\n\n        //listens for information on connection\n        if (infoReceived === false) {\n            socketRef.current.on(POPULATE_TIMER, (data) => {\n                action.current = data.action\n                countdown.current = data.countdown\n                display.current = data.countdown\n                clock.current = data.clock\n                setStart(data.action)\n                console.log('connection information received', data)\n                console.log('set with data', action.current,countdown.current,display.current,clock.current)\n                setInfoReceived(true)\n                console.log('setInfoReceived', infoReceived)\n            });\n        }\n\n        //listens for information\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            action.current = data.action\n            countdown.current = data.countdown\n            clock.current = data.clock\n            setStart(data.action)\n            console.log('information received', data)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    //calculates display time in ms based on server data\n    const calculateTime = () => {\n        if (action === false) {\n            display.current = countdown.current\n            console.log('setting display',display,countdown)\n        } else {\n            const difference = Date.now()-clock.current\n            display.current = Math.max(0,countdown-difference)\n            console.log('difference',difference)\n            console.log('currentDate',Date.now())\n        }\n        console.log('inside caluclateTime',display)\n    } \n\n    const convert = () => {\n        setMinutes(Math.floor(display/1000/60))\n        console.log('between setting minutes and seconds', display)\n        setSeconds(Math.floor ((display/1000) % 60))\n        console.log('inside conversion', display, minutes, seconds)\n        if (minutes === seconds === 0) {\n            setAlarmSound(true)\n            setWork(!work)\n            socketRef.current.emit(TIMER_WORK_REST, {\n                work:work\n            })\n            console.log('inside conditional in conversion' )\n        } else {\n            setAlarmSound(false)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            calculateTime();\n            convert();\n        }, 0);\n    })\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start,\n            countdown: display,\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n    return {start, sendStart, work, sendWork, minutes, seconds, alarmSound, infoReceived}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}