{"ast":null,"code":"import _toConsumableArray from\"/Users/bubird/Documents/GitHub/pomodoer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/bubird/Documents/GitHub/pomodoer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/bubird/Documents/GitHub/pomodoer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useRef,useState}from'react';import socketIOClient from'socket.io-client';var NEW_TASK_EVENT='newTaskItem';//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\nvar SOCKET_SERVER_URL='http://localhost:5000';var STATUS_CHANGE='statusChange';var CLEAR_COMPLETE='clearCompleteTasks';var SENDING_USER_ID='sendId';var useList=function useList(roomId){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),tasks=_useState2[0],setTasks=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),statuses=_useState4[0],setStatuses=_useState4[1];var socketRef=useRef();useEffect(function(){// creates websocket connection\nsocketRef.current=socketIOClient(SOCKET_SERVER_URL,{query:{roomId:roomId}});// listens for incoming tasks\nsocketRef.current.on(NEW_TASK_EVENT,function(task){var incomingTask=_objectSpread(_objectSpread({},task),{},{ownedByCurrentUser:task.senderId===socketRef.current.id});//adds task to tasks list, adds corresponding status to statuses\nsetTasks(function(tasks){return[].concat(_toConsumableArray(tasks),[incomingTask]);});var copy=_toConsumableArray(statuses);copy.push(false);setStatuses(function(statuses){return[].concat(_toConsumableArray(statuses),[false]);});});// listens for population \nsocketRef.current.on('populate',function(data){console.log('populate',data);console.log('data body',data[0].body);for(var i=0;i<data.length;i++){tasks.push(data[i].body);}});// listens for status changes\nsocketRef.current.on(STATUS_CHANGE,function(data){var copy=_toConsumableArray(data.status);copy[data.index]=!copy[data.index];setStatuses(copy);});// listens for connection\nsocketRef.current.on('connect',function(){console.log(socketRef.current.id);sendId(socketRef.current.id);});// socketRef.current.on(SENDING_USER_ID, (data) => {\n//     console.log('listening for sending user id', data)\n// })\n// listens for clear \nsocketRef.current.on(CLEAR_COMPLETE,function(data){var indices=[];var statusesCopy=[];for(var i=0;i<data.status.length;i++){if(data.status[i]===true){indices.push(i);}else{statusesCopy.push(false);}}setStatuses(statusesCopy);// setCompleteIndices(indices)\n// using indices to delete corresponding tasks\nvar copy=_toConsumableArray(data.tasks);for(var _i=indices.length-1;_i>-1;_i--){copy.splice(indices[_i],1);}setTasks(copy);});// destroy socket reference when the connection is closed\nreturn function(){socketRef.current.disconnect();};},[roomId,statuses]);//sends message to server that forwards to all users in room\nvar sendTask=function sendTask(taskBody){socketRef.current.emit(NEW_TASK_EVENT,{body:taskBody,senderId:socketRef.current.id,statuses:statuses});};// sends user Id to server\nvar sendId=function sendId(userId){console.log('sending id',userId);socketRef.current.emit(SENDING_USER_ID,{userId:userId});console.log('sent id');};//sends status change to server\nvar sendStatus=function sendStatus(index,statuses){socketRef.current.emit(STATUS_CHANGE,{index:index,status:statuses});};//sends clear notif to server\nvar sendClear=function sendClear(statuses,tasks){socketRef.current.emit(CLEAR_COMPLETE,{status:statuses,tasks:tasks});};return{tasks:tasks,sendTask:sendTask,statuses:statuses,sendStatus:sendStatus,sendClear:sendClear};};export default useList;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useList.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_TASK_EVENT","SOCKET_SERVER_URL","STATUS_CHANGE","CLEAR_COMPLETE","SENDING_USER_ID","useList","roomId","tasks","setTasks","statuses","setStatuses","socketRef","current","query","on","task","incomingTask","ownedByCurrentUser","senderId","id","copy","push","data","console","log","body","i","length","status","index","sendId","indices","statusesCopy","splice","disconnect","sendTask","taskBody","emit","userId","sendStatus","sendClear"],"mappings":"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","sourcesContent":["import {useEffect, useRef, useState} from 'react';\nimport socketIOClient from 'socket.io-client';\n\nconst NEW_TASK_EVENT = 'newTaskItem';\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\nconst STATUS_CHANGE = 'statusChange'\nconst CLEAR_COMPLETE = 'clearCompleteTasks'\nconst SENDING_USER_ID = 'sendId'\nconst useList = (roomId) => {\n    const [tasks, setTasks] = useState([]);\n    const [statuses, setStatuses] = useState([]);\n    const socketRef = useRef();\n    \n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n\n        // listens for incoming tasks\n        socketRef.current.on(NEW_TASK_EVENT, (task) => {\n            const incomingTask = {\n                ...task,\n                ownedByCurrentUser: task.senderId === socketRef.current.id\n            };\n\n            //adds task to tasks list, adds corresponding status to statuses\n            setTasks((tasks) => [...tasks, incomingTask])\n            const copy = [...statuses];\n            copy.push(false);\n            setStatuses((statuses) => [...statuses, false])\n\n        });\n\n        // listens for population \n        socketRef.current.on('populate', (data) => {\n            console.log('populate',data)\n            console.log('data body',data[0].body)\n            for (let i=0; i < data.length; i++) {\n                tasks.push(data[i].body)\n            }\n            \n        })\n\n        // listens for status changes\n        socketRef.current.on(STATUS_CHANGE, (data) => {\n            const copy = [...data.status]\n            copy[data.index] = !copy[data.index];\n            setStatuses(copy);\n        })\n\n        // listens for connection\n        socketRef.current.on('connect', ()=>{\n            console.log(socketRef.current.id)\n            sendId(socketRef.current.id)\n\n        });\n\n        // socketRef.current.on(SENDING_USER_ID, (data) => {\n        //     console.log('listening for sending user id', data)\n        // })\n\n        // listens for clear \n        socketRef.current.on(CLEAR_COMPLETE, (data) => {\n            const indices = []\n            const statusesCopy = []\n            for (let i=0; i < data.status.length; i++) {\n                if (data.status[i] === true) {\n                    indices.push(i)\n                } else {\n                    statusesCopy.push(false)\n                }\n            }\n\n            setStatuses(statusesCopy)\n            // setCompleteIndices(indices)\n            \n\n            // using indices to delete corresponding tasks\n            const copy = [...data.tasks]\n            for (let i=indices.length-1; i>(-1);i--) {\n                copy.splice(indices[i],1)\n            }\n            setTasks(copy);\n\n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,statuses]);\n\n    //sends message to server that forwards to all users in room\n    const sendTask = (taskBody) => {\n        socketRef.current.emit(NEW_TASK_EVENT, {\n            body: taskBody,\n            senderId: socketRef.current.id,\n            statuses: statuses\n        });\n    }\n\n    // sends user Id to server\n    const sendId = (userId) => {\n        console.log('sending id', userId)\n        socketRef.current.emit(SENDING_USER_ID, {\n            userId: userId\n        });\n        console.log('sent id')\n    }\n\n    //sends status change to server\n    const sendStatus = (index,statuses) => {\n        socketRef.current.emit(STATUS_CHANGE, {\n            index: index,\n            status: statuses,\n        })\n    }\n\n    //sends clear notif to server\n    const sendClear = (statuses,tasks) => {\n        socketRef.current.emit(CLEAR_COMPLETE, {\n            status: statuses,\n            tasks: tasks,\n        }) \n    }\n\n    return {tasks, sendTask, statuses, sendStatus, sendClear}\n}\n\nexport default useList"]},"metadata":{},"sourceType":"module"}