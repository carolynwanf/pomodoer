{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const socketRef = useRef();\n  const [alarmSound, setAlarmSound] = useState(false); // \n  //function for decrementing timer\n  // const decrement = () => {\n  //     if (start === true) {\n  //     const intervalId = setInterval(() => {\n  //         setSeconds((prev) => prev - 1);\n  //         setAlarmSound(false)\n  //         console.log('alarm sound set',alarmSound)\n  //     }, 1000);\n  //     return () => {\n  //         clearInterval(intervalId);\n  //     };\n  //     }\n  // }\n  //calls decrement every time start changes\n  // useEffect(decrement, [start]);\n  // console.log(alarmSound)\n  //function for adjusting display time\n  // const time = () => {\n  //     if (start === true){\n  //       if (seconds === -1 && minutes !== 0) {\n  //         setSeconds(59);\n  //         setMinutes((prev) => prev - 1);\n  //       } else if (minutes === 0 && seconds === -1 && work === true) {\n  //         setMinutes(5);\n  //         setSeconds(0);\n  //         setWork(false);\n  //         setAlarmSound(true)\n  //       } else if (minutes === 0 && seconds === -1 && work === false) {\n  //         setMinutes(25);\n  //         setSeconds(0);\n  //         setWork(true);\n  //         setAlarmSound(true)\n  //       }\n  //     }\n  // }\n  //calls time on every re-render\n  // useEffect(time, [seconds]);\n\n  const [action, setAction] = useState(false);\n  const [countdown, setCountdown] = useState(1500000);\n  const [clock, setClock] = useState();\n  const [display, setDisplay] = useState();\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n    }); //listens for information\n\n    socketRef.current.on(INFORMATION_TO_CLIENT, data => {\n      setAction(data.action);\n      setCountdown(data.countdown);\n      setClock(data.clock);\n      console.log('information received', data);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, start]); //calculates display time in ms based on server data\n\n  const calculateTime = () => {\n    if (action === false) {\n      setDisplay(countdown);\n    } else {\n      const difference = Date.now() - clock;\n      setDisplay(Math.max(0, difference));\n    }\n\n    console.log('inside caluclateTime', display);\n  };\n\n  const convert = () => {\n    setMinutes(Math.floor(display / 1000 / 60));\n    setSeconds(Math.floor(display / 1000 % 60));\n    console.log('inside conversion', minutes, seconds);\n  };\n\n  useEffect(() => {\n    calculateTime();\n    convert();\n  }, [action, countdown, clock, seconds]); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    alarmSound\n  };\n};\n\n_s(useTimer, \"e4yIw9cQMWLITUZZ1i8oTTZMOe4=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","alarmSound","setAlarmSound","action","setAction","countdown","setCountdown","clock","setClock","display","setDisplay","current","query","on","data","console","log","disconnect","calculateTime","difference","Date","now","Math","max","convert","floor","sendStart","emit","sendWork"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA0C,OAA1C;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAGA;AACA;AAEA;;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;AAIA,MAAMC,gBAAgB,GAAG,WAAzB;AACA,MAAMC,eAAe,GAAG,cAAxB;AACA,MAAMC,qBAAqB,GAAG,UAA9B;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAMiB,SAAS,GAAGhB,MAAM,EAAxB;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,KAAD,CAA5C,CANyB,CAQzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEJ;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,QAAM,CAACoB,MAAD,EAAQC,SAAR,IAAqBrB,QAAQ,CAAC,KAAD,CAAnC;AACA,QAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,OAAD,CAA1C;AACA,QAAM,CAACwB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,EAAlC;AACA,QAAM,CAAC0B,OAAD,EAAUC,UAAV,IAAwB3B,QAAQ,EAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACX;AACAkB,IAAAA,SAAS,CAACW,OAAV,GAAoB1B,cAAc,CAACC,iBAAD,EAAoB;AAClD0B,MAAAA,KAAK,EAAC;AAACrB,QAAAA;AAAD;AAD4C,KAApB,CAAlC,CAFW,CAMX;;AACAS,IAAAA,SAAS,CAACW,OAAV,CAAkBE,EAAlB,CAAqB1B,gBAArB,EAAwC2B,IAAD,IAAU;AAC7CrB,MAAAA,QAAQ,CAAC,CAACqB,IAAI,CAACtB,KAAP,CAAR;AACH,KAFD,EAPW,CAWX;;AACAQ,IAAAA,SAAS,CAACW,OAAV,CAAkBE,EAAlB,CAAqBxB,qBAArB,EAA6CyB,IAAD,IAAU;AAClDV,MAAAA,SAAS,CAACU,IAAI,CAACX,MAAN,CAAT;AACAG,MAAAA,YAAY,CAACQ,IAAI,CAACT,SAAN,CAAZ;AACAG,MAAAA,QAAQ,CAACM,IAAI,CAACP,KAAN,CAAR;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,IAApC;AACH,KALD;AAQAd,IAAAA,SAAS,CAACW,OAAV,CAAkBE,EAAlB,CAAqBzB,eAArB,EAAuC0B,IAAD,IAAU;AAC5C,YAAMpB,IAAI,GAAGoB,IAAI,CAACpB,IAAlB;AACAC,MAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;;AACA,UAAIA,IAAI,KAAK,IAAb,EAAkB;AACdG,QAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,QAAAA,UAAU,CAAC,CAAD,CAAV;AACD,OAHH,MAGS;AACLF,QAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,QAAAA,UAAU,CAAC,CAAD,CAAV;AACD;AAEN,KAXD,EApBW,CAiCX;;AACA,WAAO,MAAM;AACTC,MAAAA,SAAS,CAACW,OAAV,CAAkBM,UAAlB;AACH,KAFD;AAGH,GArCQ,EAqCN,CAAC1B,MAAD,EAAQC,KAAR,CArCM,CAAT,CAzDyB,CAgGzB;;AACA,QAAM0B,aAAa,GAAG,MAAM;AACxB,QAAIf,MAAM,KAAK,KAAf,EAAsB;AAClBO,MAAAA,UAAU,CAACL,SAAD,CAAV;AACH,KAFD,MAEO;AACH,YAAMc,UAAU,GAAGC,IAAI,CAACC,GAAL,KAAWd,KAA9B;AACAG,MAAAA,UAAU,CAACY,IAAI,CAACC,GAAL,CAAS,CAAT,EAAWJ,UAAX,CAAD,CAAV;AACH;;AACDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCP,OAAnC;AACH,GARD;;AAUA,QAAMe,OAAO,GAAG,MAAM;AAClB3B,IAAAA,UAAU,CAACyB,IAAI,CAACG,KAAL,CAAWhB,OAAO,GAAC,IAAR,GAAa,EAAxB,CAAD,CAAV;AACAV,IAAAA,UAAU,CAACuB,IAAI,CAACG,KAAL,CAAahB,OAAO,GAAC,IAAT,GAAiB,EAA7B,CAAD,CAAV;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCpB,OAAjC,EAA0CE,OAA1C;AACH,GAJD;;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AAEZoC,IAAAA,aAAa;AACbM,IAAAA,OAAO;AAEV,GALQ,EAKP,CAACrB,MAAD,EAAQE,SAAR,EAAkBE,KAAlB,EAAwBT,OAAxB,CALO,CAAT,CAjHyB,CA0HzB;;AACA,QAAM4B,SAAS,GAAIlC,KAAD,IAAW;AACzBQ,IAAAA,SAAS,CAACW,OAAV,CAAkBgB,IAAlB,CAAuBxC,gBAAvB,EAAyC;AACrCK,MAAAA,KAAK,EAAEA;AAD8B,KAAzC;AAGH,GAJD;;AAMA,QAAMoC,QAAQ,GAAIlC,IAAD,IAAU;AACvBM,IAAAA,SAAS,CAACW,OAAV,CAAkBgB,IAAlB,CAAuBvC,eAAvB,EAAwC;AACpCM,MAAAA,IAAI,EAAEA;AAD8B,KAAxC;AAGH,GAJD;;AAOA,SAAO;AAACF,IAAAA,KAAD;AAAQkC,IAAAA,SAAR;AAAmBhC,IAAAA,IAAnB;AAAyBkC,IAAAA,QAAzB;AAAmChC,IAAAA,OAAnC;AAA4CE,IAAAA,OAA5C;AAAqDG,IAAAA;AAArD,GAAP;AACH,CAzID;;GAAMX,Q;;AA2IN,eAAeA,QAAf","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo'\n\nconst useTimer = (roomId) => {\n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n    const [alarmSound, setAlarmSound] = useState(false)\n\n    // \n    //function for decrementing timer\n    // const decrement = () => {\n    //     if (start === true) {\n    //     const intervalId = setInterval(() => {\n    //         setSeconds((prev) => prev - 1);\n    //         setAlarmSound(false)\n    //         console.log('alarm sound set',alarmSound)\n    //     }, 1000);\n    \n    //     return () => {\n    //         clearInterval(intervalId);\n    //     };\n    //     }\n    // }\n\n    //calls decrement every time start changes\n    // useEffect(decrement, [start]);\n\n// console.log(alarmSound)\n\n    //function for adjusting display time\n    // const time = () => {\n    //     if (start === true){\n    //       if (seconds === -1 && minutes !== 0) {\n    //         setSeconds(59);\n    //         setMinutes((prev) => prev - 1);\n    //       } else if (minutes === 0 && seconds === -1 && work === true) {\n    //         setMinutes(5);\n    //         setSeconds(0);\n    //         setWork(false);\n    //         setAlarmSound(true)\n    //       } else if (minutes === 0 && seconds === -1 && work === false) {\n    //         setMinutes(25);\n    //         setSeconds(0);\n    //         setWork(true);\n    //         setAlarmSound(true)\n    //       }\n    //     }\n    // }\n\n    //calls time on every re-render\n    // useEffect(time, [seconds]);\n\n    const [action,setAction] = useState(false)\n    const [countdown, setCountdown] = useState(1500000)\n    const [clock, setClock] = useState()\n    const [display, setDisplay] = useState()\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n        })\n\n        //listens for information\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            setAction(data.action)\n            setCountdown(data.countdown)\n            setClock(data.clock)\n            console.log('information received', data)\n        })\n\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId,start]);\n\n    //calculates display time in ms based on server data\n    const calculateTime = () => {\n        if (action === false) {\n            setDisplay(countdown)\n        } else {\n            const difference = Date.now()-clock\n            setDisplay(Math.max(0,difference))\n        }\n        console.log('inside caluclateTime',display)\n    } \n\n    const convert = () => {\n        setMinutes(Math.floor(display/1000/60))\n        setSeconds(Math.floor ((display/1000) % 60))\n        console.log('inside conversion', minutes, seconds)\n    }\n\n    useEffect(() => {\n\n        calculateTime()\n        convert()\n           \n    },[action,countdown,clock,seconds])\n\n    \n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n\n    return {start, sendStart, work, sendWork, minutes, seconds, alarmSound}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}