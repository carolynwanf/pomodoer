{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from 'socket.io-client'; //for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n//for local environ.\n\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer'; // var clientData = {\n//     start: false,\n//     work: true,\n//     minutes: 25,\n//     seconds: 0,\n//     alarmSound: false,\n//     infoReceived: false,\n//     action: false,\n//     countdown: 0,\n//     clock: 0,\n//     display: 0,\n// }\n// var start = clientData.start\n// var work = clientData.work\n// var minutes = clientData.minutes\n// var seconds = clientData.seconds\n// var alarmSound = clientData.alarmSound\n// var infoReceived = clientData.infoReceived\n// var action = clientData.action\n// var countdown = clientData.countdown\n// var clock = clientData.clock\n// var display = display \n\nconst useTimer = roomId => {\n  _s();\n\n  const [start, setStart] = useState(false);\n  const [work, setWork] = useState(true);\n  const [minutes, setMinutes] = useState(25);\n  const [seconds, setSeconds] = useState(0);\n  const socketRef = useRef();\n  const [alarmSound, setAlarmSound] = useState(false);\n  const [infoReceived, setInfoReceived] = useState(false); //initialize these after info pulled from server?\n\n  const [action, setAction] = useState(false);\n  const [countdown, setCountdown] = useState(1500000);\n  const [clock, setClock] = useState(1614986917000);\n  const [display, setDisplay] = useState(1500000);\n  useEffect(() => {\n    // creates websocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    }); // listens for timer start/stop push\n\n    socketRef.current.on(TIMER_START_STOP, data => {\n      setStart(!data.start);\n      console.log('start/stop received');\n    }); //listens for information on connection\n\n    if (infoReceived === false) {\n      socketRef.current.on(POPULATE_TIMER, data => {\n        setAction(data.action);\n        setCountdown(data.countdown);\n        setDisplay(data.countdown);\n        setClock(data.clock);\n        setStart(data.action);\n        console.log('connection information received', data);\n        console.log('set with data', action, countdown, display, clock);\n        setInfoReceived(true);\n        console.log('setInfoReceived', infoReceived);\n      });\n    } //listens for information\n\n\n    socketRef.current.on(INFORMATION_TO_CLIENT, data => {\n      setAction(data.action);\n      setCountdown(data.countdown);\n      setClock(data.clock);\n      setStart(data.action);\n      console.log('information received', data);\n    });\n    socketRef.current.on(TIMER_WORK_REST, data => {\n      const work = data.work;\n      setWork(!work);\n\n      if (work === true) {\n        setMinutes(5);\n        setSeconds(0);\n      } else {\n        setMinutes(25);\n        setSeconds(0);\n      }\n    }); // destroy socket reference when the connection is closed\n\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]); //calculates display time in ms based on server data\n\n  const calculateTime = () => {\n    if (infoReceived === true) {\n      if (action.current === false) {\n        display.current = countdown.current;\n        console.log('setting display', display.current, countdown.current);\n      } else {\n        const difference = Date.now() - clock.current;\n        display.current = Math.max(0, countdown.current - difference);\n        console.log('difference', difference);\n        console.log('currentDate', Date.now());\n      }\n\n      console.log('inside caluclateTime', display.current);\n    }\n  };\n\n  const convert = () => {\n    if (infoReceived === true) {\n      setMinutes(Math.floor(display.current / 1000 / 60));\n      console.log('between setting minutes and seconds', display.current);\n      setSeconds(Math.floor(display.current / 1000 % 60));\n      console.log('inside conversion', display.current, minutes, seconds);\n\n      if (minutes === seconds === 0) {\n        setAlarmSound(true);\n        setWork(!work);\n        socketRef.current.emit(TIMER_WORK_REST, {\n          work: work\n        });\n        console.log('inside conditional in conversion');\n      } else {\n        setAlarmSound(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      calculateTime();\n      convert();\n    }, 0);\n  }); //sends message to server that forwards to all users in room\n\n  const sendStart = start => {\n    socketRef.current.emit(TIMER_START_STOP, {\n      start: start,\n      countdown: display\n    });\n  };\n\n  const sendWork = work => {\n    socketRef.current.emit(TIMER_WORK_REST, {\n      work: work\n    });\n  };\n\n  return {\n    start,\n    sendStart,\n    work,\n    sendWork,\n    minutes,\n    seconds,\n    alarmSound,\n    infoReceived\n  };\n};\n\n_s(useTimer, \"NOZ3qPdD2GFkLLInw1+6C+ZKlfA=\");\n\nexport default useTimer;","map":{"version":3,"sources":["/Users/bubird/Documents/GitHub/pomodoer/src/useTimer.js"],"names":["useEffect","useState","useRef","socketIOClient","SOCKET_SERVER_URL","TIMER_START_STOP","TIMER_WORK_REST","INFORMATION_TO_CLIENT","POPULATE_TIMER","useTimer","roomId","start","setStart","work","setWork","minutes","setMinutes","seconds","setSeconds","socketRef","alarmSound","setAlarmSound","infoReceived","setInfoReceived","action","setAction","countdown","setCountdown","clock","setClock","display","setDisplay","current","query","on","data","console","log","disconnect","calculateTime","difference","Date","now","Math","max","convert","floor","emit","setTimeout","sendStart","sendWork"],"mappings":"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","sourcesContent":["import {useEffect, useState, useRef} from 'react';\nimport socketIOClient from 'socket.io-client';\n\n\n//for heroku\n// const SOCKET_SERVER_URL = 'https://pomodoer.herokuapp.com/';\n\n//for local environ.\nconst SOCKET_SERVER_URL = 'http://localhost:5000';\n\n\n\nconst TIMER_START_STOP = 'timerPush';\nconst TIMER_WORK_REST = 'workRestPush';\nconst INFORMATION_TO_CLIENT = 'sendInfo';\nconst POPULATE_TIMER = 'populateTimer';\n\n// var clientData = {\n//     start: false,\n//     work: true,\n//     minutes: 25,\n//     seconds: 0,\n//     alarmSound: false,\n//     infoReceived: false,\n//     action: false,\n//     countdown: 0,\n//     clock: 0,\n//     display: 0,\n// }\n\n// var start = clientData.start\n// var work = clientData.work\n// var minutes = clientData.minutes\n// var seconds = clientData.seconds\n// var alarmSound = clientData.alarmSound\n// var infoReceived = clientData.infoReceived\n// var action = clientData.action\n// var countdown = clientData.countdown\n// var clock = clientData.clock\n// var display = display \n\nconst useTimer = (roomId) => {\n    \n    const [start, setStart] = useState(false);\n    const [work, setWork] = useState(true);\n    const [minutes, setMinutes] = useState(25);\n    const [seconds, setSeconds] = useState(0);\n    const socketRef = useRef();\n    const [alarmSound, setAlarmSound] = useState(false)\n    const [infoReceived, setInfoReceived] = useState(false)\n\n    //initialize these after info pulled from server?\n\n    const [action,setAction] = useState(false)\n    const [countdown, setCountdown] = useState(1500000)\n    const [clock, setClock] = useState(1614986917000)\n    const [display, setDisplay] = useState(1500000)\n\n    useEffect(()=> {\n        // creates websocket connection\n        socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n            query:{roomId},\n        });\n        \n        // listens for timer start/stop push\n        socketRef.current.on(TIMER_START_STOP, (data) => {\n            setStart(!data.start);\n            console.log('start/stop received')\n        });\n\n        //listens for information on connection\n        if (infoReceived === false) {\n            socketRef.current.on(POPULATE_TIMER, (data) => {\n                setAction(data.action)\n                setCountdown(data.countdown)\n                setDisplay(data.countdown)\n                setClock(data.clock)\n                setStart(data.action)\n                console.log('connection information received', data)\n                console.log('set with data', action,countdown,display,clock)\n                setInfoReceived(true)\n                console.log('setInfoReceived', infoReceived)\n            });\n        }\n\n        //listens for information\n        socketRef.current.on(INFORMATION_TO_CLIENT, (data) => {\n            setAction(data.action)\n            setCountdown(data.countdown)\n            setClock(data.clock)\n            setStart(data.action)\n            console.log('information received', data)\n        });\n\n        socketRef.current.on(TIMER_WORK_REST, (data) => {\n            const work = data.work\n            setWork(!work)\n            if (work === true){\n                setMinutes(5);\n                setSeconds(0);\n              } else {\n                setMinutes(25);\n                setSeconds(0);\n              }\n    \n        })\n\n        // destroy socket reference when the connection is closed\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [roomId]);\n\n    //calculates display time in ms based on server data\n    const calculateTime = () => {\n        if (infoReceived === true) {\n            if (action.current === false) {\n                display.current = countdown.current\n                console.log('setting display',display.current,countdown.current)\n            } else {\n                const difference = Date.now()-clock.current\n                display.current = Math.max(0,countdown.current-difference)\n                console.log('difference',difference)\n                console.log('currentDate',Date.now())\n            }\n            console.log('inside caluclateTime',display.current)\n        }\n    } \n\n    const convert = () => {\n        if (infoReceived === true) {\n            setMinutes(Math.floor(display.current/1000/60))\n            console.log('between setting minutes and seconds', display.current)\n            setSeconds(Math.floor ((display.current/1000) % 60))\n            console.log('inside conversion', display.current, minutes, seconds)\n            if (minutes === seconds === 0) {\n                setAlarmSound(true)\n                setWork(!work)\n                socketRef.current.emit(TIMER_WORK_REST, {\n                    work:work\n                })\n                console.log('inside conditional in conversion' )\n            } else {\n                setAlarmSound(false)\n            }\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            calculateTime();\n            convert();\n        }, 0);\n    })\n\n    //sends message to server that forwards to all users in room\n    const sendStart = (start) => {\n        socketRef.current.emit(TIMER_START_STOP, {\n            start: start,\n            countdown: display,\n        });\n    }\n\n    const sendWork = (work) => {\n        socketRef.current.emit(TIMER_WORK_REST, {\n            work: work,\n        })\n    }\n\n    return {start, sendStart, work, sendWork, minutes, seconds, alarmSound, infoReceived}\n}\n\nexport default useTimer\n\n"]},"metadata":{},"sourceType":"module"}